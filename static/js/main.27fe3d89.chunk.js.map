{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","Getter","window","myContract","methods","AirdropAmount","call","then","console","log","setState","getAirdrop","send","from","defaultAccount","on","transactionHash","receipt","error","state","ethereum","autoRefreshOnNetwoorkChange","enable","accounts","provider","chainId","web3","Web3","abi","require","eth","Contract","toLowerCase","networkVersion","onClick","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"upEAoGeA,E,kDAjGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAsDRC,OAAS,WACPC,OAAOC,WAAWC,QAAQC,gBAAgBC,OAAOC,MAAK,SAAAF,GACpDG,QAAQC,IAAIJ,GACZ,EAAKK,SAAS,CAACL,cAAcA,QA1Dd,EA8DnBM,WAAY,WACVT,OAAOC,WAAWC,QAAQO,aAAaC,KAAK,CAACC,KAAKX,OAAOY,iBACxDC,GAAG,mBAAkB,SAACC,GACrBR,QAAQC,IAAI,kBAAkBO,MAE/BD,GAAG,WAAU,SAACE,GACbT,QAAQC,IAAI,CAACQ,QAAQA,OAEtBF,GAAG,SAAQ,SAACG,EAAMD,GACjBT,QAAQC,IAAI,CAACS,MAAMA,EAAMD,QAAQA,QArEnC,EAAKE,MAAQ,CACXd,cAAc,GAHC,E,2LAQa,qBAApBH,OAAOkB,S,wBACTA,EAAWlB,OAAOkB,UAEfC,6BAA8B,E,kBAIdD,EAASE,S,OAA1BC,E,OACNf,QAAQC,IAAIc,GAENC,EAAWtB,OAAM,SACvBM,QAAQC,IAAIe,GAEZhB,QAAQC,IAAIe,EAASC,SAEfC,EAAO,IAAIC,IAAKH,GACtBhB,QAAQC,IAAIiB,GAGNE,EAAMC,EAAQ,KAEJ,6CAEhB3B,OAAOC,WAAa,IAAIuB,EAAKI,IAAIC,SAASH,EAAIA,IAF9B,8CAGhBpB,QAAQC,IAAIP,OAAOC,YAEnBD,OAAOY,eAAiBS,EAAS,GAAGS,cACpCxB,QAAQC,IAAIP,OAAOY,gBAGnBM,EAASL,GAAG,mBAAmB,SAAUQ,GACvCf,QAAQC,IAAI,mBAAqBc,MAGnCH,EAASL,GAAG,kBAAkB,SAAUkB,GACtCzB,QAAQC,IAAI,kBAAoBwB,M,kFASpCzB,QAAQC,IAAI,wB,+IAwBN,IAAD,OACP,OACE,gCACA,gCACA,4DACA,oIAEA,uBAAK,uBACL,4CACe,wBAAQyB,QAAS,WAAQ,EAAKjC,UAA9B,SAA2C,wEAD1D,QAEQkC,KAAKhB,MAAMd,cAAX,SAAyB,GAAI,OAErC,uBAVA,WAWY,wBAAQ6B,QAAS,WAAO,EAAKvB,cAA7B,SAA4C,mE,GA1F3CyB,aCUJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.27fe3d89.chunk.js","sourcesContent":["import react, { Component } from 'react';\nimport Web3 from \"web3\";\nclass  App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      AirdropAmount:0\n     };\n  }\n  async componentDidMount() {\n    //判断页面是否安装了Metamask\n    if(typeof window.ethereum !== 'undefined'){\n      const ethereum = window.ethereum\n      //禁止页面自动刷新，metamask要求写的\n      ethereum.autoRefreshOnNetwoorkChange = false\n\n      try{\n        //第一次链接Metamask\n        const accounts = await ethereum.enable()\n        console.log(accounts)\n        //初始化Provider\n        const provider = window['ethereum']\n        console.log(provider)\n        //获取网络ID\n        console.log(provider.chainId)\n        //实例化Web3\n        const web3 = new Web3(provider)\n        console.log(web3)\n\n        //导入abi文件\n        const abi = require(\"./contract.abi.json\")\n        //定义合约地址\n        const address = \"0x6ce2f1206a8b6736543e357049a7e17f0cb29368\"\n        //实例化合约\n        window.myContract = new web3.eth.Contract(abi.abi,address)\n        console.log(window.myContract)\n\n        window.defaultAccount = accounts[0].toLowerCase()\n        console.log(window.defaultAccount)\n\n        //切换Metamask帐号\n        ethereum.on('accountsChanged', function (accounts){\n          console.log(\"accountsChanged:\" + accounts)\n        })\n        //切换Metamaskm网络ID\n        ethereum.on('networkChanged', function (networkVersion){\n          console.log(\"networkChanged:\" + networkVersion)\n        })\n\n      }catch(e){\n\n\n      }\n\n    }else{\n      console.log('没有metamask')\n    }\n  }\n  Getter = () => {\n    window.myContract.methods.AirdropAmount().call().then(AirdropAmount=>{\n      console.log(AirdropAmount)\n      this.setState({AirdropAmount:AirdropAmount})\n    })\n  }\n\n  getAirdrop =() => {\n    window.myContract.methods.getAirdrop().send({from:window.defaultAccount})\n    .on('transactionHash',(transactionHash)=>{\n      console.log('transactionHash',transactionHash)\n    })\n    .on('receipt',(receipt)=>{\n      console.log({receipt:receipt})\n    })\n    .on('error',(error,receipt)=>{\n      console.log({error:error,receipt:receipt})\n    })\n  }\n\n\n  render() {\n    return (\n      <div>\n      <div>\n      <h2>LG空投领取</h2>\n      <p>每个人只可领取一次，请勿重复领取</p>\n      </div>\n      <hr/><hr/>\n      <div>\n        &nbsp;&nbsp; <button onClick={() => { this.Getter() }} ><h4>每人可领数量</h4></button>\n      &nbsp; {this.state.AirdropAmount/10**18}\n      </div>\n      <hr/>\n      &nbsp;&nbsp;<button onClick={() => {this.getAirdrop()}}><h2>领取空投</h2></button>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}