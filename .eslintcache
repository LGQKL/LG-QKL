[{"D:\\blockchain\\LG\\lgweb3\\src\\index.js":"1","D:\\blockchain\\LG\\lgweb3\\src\\reportWebVitals.js":"2","D:\\blockchain\\LG\\lgweb3\\src\\App.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":2726,"mtime":1609832690566,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"qzoyqy",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"10"},"D:\\blockchain\\LG\\lgweb3\\src\\index.js",[],["16","17"],"D:\\blockchain\\LG\\lgweb3\\src\\reportWebVitals.js",[],"D:\\blockchain\\LG\\lgweb3\\src\\App.js",["18"],"import react, { Component } from 'react';\nimport Web3 from \"web3\";\nclass  App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      AirdropAmount:0\n     };\n  }\n  async componentDidMount() {\n    //判断页面是否安装了Metamask\n    if(typeof window.ethereum !== 'undefined'){\n      const ethereum = window.ethereum\n      //禁止页面自动刷新，metamask要求写的\n      ethereum.autoRefreshOnNetwoorkChange = false\n\n      try{\n        //第一次链接Metamask\n        const accounts = await ethereum.enable()\n        console.log(accounts)\n        //初始化Provider\n        const provider = window['ethereum']\n        console.log(provider)\n        //获取网络ID\n        console.log(provider.chainId)\n        //实例化Web3\n        const web3 = new Web3(provider)\n        console.log(web3)\n\n        //导入abi文件\n        const abi = require(\"./contract.abi.json\")\n        //定义合约地址\n        const address = \"0x6ce2f1206a8b6736543e357049a7e17f0cb29368\"\n        //实例化合约\n        window.myContract = new web3.eth.Contract(abi.abi,address)\n        console.log(window.myContract)\n\n        window.defaultAccount = accounts[0].toLowerCase()\n        console.log(window.defaultAccount)\n\n        //切换Metamask帐号\n        ethereum.on('accountsChanged', function (accounts){\n          console.log(\"accountsChanged:\" + accounts)\n        })\n        //切换Metamaskm网络ID\n        ethereum.on('networkChanged', function (networkVersion){\n          console.log(\"networkChanged:\" + networkVersion)\n        })\n\n      }catch(e){\n\n\n      }\n\n    }else{\n      console.log('没有metamask')\n    }\n  }\n  Getter = () => {\n    window.myContract.methods.AirdropAmount().call().then(AirdropAmount=>{\n      console.log(AirdropAmount)\n      this.setState({AirdropAmount:AirdropAmount})\n    })\n  }\n\n  getAirdrop =() => {\n    window.myContract.methods.getAirdrop().send({from:window.defaultAccount})\n    .on('transactionHash',(transactionHash)=>{\n      console.log('transactionHash',transactionHash)\n    })\n    .on('receipt',(receipt)=>{\n      console.log({receipt:receipt})\n    })\n    .on('error',(error,receipt)=>{\n      console.log({error:error,receipt:receipt})\n    })\n  }\n\n\n  render() {\n    return (\n      <div>\n      <div>\n      <h2>LG空投领取</h2>\n      <p>每个人只可领取一次，请勿重复领取</p>\n      </div>\n      <hr/><hr/>\n      <div>\n        &nbsp;&nbsp; <button onClick={() => { this.Getter() }} ><h4>每人可领数量</h4></button>\n      &nbsp; {this.state.AirdropAmount/10**18}\n      </div>\n      <hr/>\n      &nbsp;&nbsp;<button onClick={() => {this.getAirdrop()}}><h2>领取空投</h2></button>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":1,"column":8,"nodeType":"25","messageId":"26","endLine":1,"endColumn":13},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'react' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]