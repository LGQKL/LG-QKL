{"version":3,"sources":["nft/utils/buildSellObject.ts","nft/utils/carousel.ts","nft/utils/timeSince.ts","nft/utils/transactionResponse.ts","nft/utils/updatedAssets.ts","nft/utils/roundAndPluralize.ts","nft/utils/fetchPrice.ts","nft/utils/numbers.ts","nft/utils/rarity.ts","nft/utils/buildActivityAsset.ts","nft/utils/formatEventProperties.ts","nft/utils/x2y2.ts","nft/utils/listNfts.ts","nft/utils/asset.ts","nft/utils/calcPoolPrice.ts","nft/utils/isAudio.ts","nft/utils/isVideo.ts"],"names":["buildSellObject","amount","address","decimals","name","priceInfo","baseAsset","basePrice","ETHPrice","symbol","tokenId","tokenType","calculateCardIndex","x","l","calculateFirstCardIndex","i","firstVis","firstVisIdx","idx","calculateRank","position","y","HOUR","MINUTE","DAY","timeLeft","targetDate","countDown","Date","getTime","days","Math","floor","hours","minutes","roundAndPluralize","shortenTxHash","txHash","charsToShorten","addCharsToBack","substring","length","parseTransactionResponse","transactionResponse","ethPrice","nftsPurchased","nftsNotPurchased","showPurchasedModal","showRefundModal","totalPurchaseValue","BigNumber","from","totalRefundValue","totalUSDRefund","txFeeFiat","undefined","purchasedNfts","notPurchasedNfts","txReceipt","getTotalNftValue","parseFloat","formatEther","txFee","gasUsed","mul","effectiveGasPrice","getSuccessfulImageSize","numSuccessful","isMobile","sizeModifier","updatedAssetPriceDifference","asset","updatedPriceInfo","sub","sortUpdatedAssets","gt","nfts","reduce","ethTotal","nft","add","word","rounded","pluralize","number","Currency","fetchPrice","a","currency","ETH","fetch","response","json","then","j","data","rates","USD","console","error","useUsdPrice","fetchedPriceData","useQuery","toString","isNumber","s","test","isNaN","isFinite","floorFormatter","n","toFixed","toLocaleString","DEFAULT_LOCALE","minimumFractionDigits","maximumFractionDigits","toPrecision","numbro","format","average","mantissa","optionalMantissa","abbreviations","million","billion","trillion","toUpperCase","toExponential","replace","Number","volumeFormatter","round","thousand","quantityFormatter","thousandSeparated","roundWholePercentage","fallbackProvider","fallbackProviderLogo","rarityProviderLogo","Genie","getRarityProviderLogo","source","buildActivityAsset","event","collectionName","ethPriceInUSD","assetUsdPrice","price","trunc","div","collectionAddress","imageUrl","tokenMetadata","marketplace","susFlag","suspiciousFlag","smallImageUrl","collectionSymbol","USDPrice","standard","formatAssetEventProperties","assets","collection_addresses","map","token_ids","token_types","orderItemParamType","orderParamTypes","orderParamType","signOrderData","web3Provider","order","orderData","defaultAbiCoder","encode","salt","user","network","intent","delegateType","deadline","dataMask","items","orderHash","keccak256","send","orderSig","r","slice","v","parseInt","fixSignature","encodeOrder","createSellOrder","randomHex","randomBytes","toHexString","hexZeroPad","randomSalt","AddressZero","item","tokens","signVersion","ListingMarkets","fee","icon","createConsiderationItem","basisPoints","recipient","getConsiderationItems","signerAddress","openSeaBasisPoints","OPENSEA_DEFAULT_FEE","INVERSE_BASIS_POINTS","creatorFeeBasisPoints","creatorPercentage","sellerBasisPoints","openseaFee","creatorFee","sellerFee","OPENSEA_FEE_ADDRESS","asset_contract","payout_address","approveCollection","operator","signer","setStatus","ERC721Contract","Contract","ERC721","getAddress","ListingStatus","PENDING","isApprovedForAll","APPROVED","SIGNING","setApprovalForAll","approvalTransaction","wait","status","FAILED","code","REJECTED","signListing","provider","looksRareNonce","seaport","Seaport","conduitKeyToConduit","OPENSEA_KEY_TO_CONDUIT","overrides","defaultConduitKey","OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY","listingPrice","newListings","find","listing","expirationTime","listingInWei","parseEther","considerationItems","filter","createOrder","offer","itemType","ItemType","token","identifier","consideration","endTime","zone","OPENSEA_DEFAULT_ZONE","restrictedByZone","allowPartialFills","executeAllActions","PostOpenSeaSellOrder","OPENSEA_LISTINGS_API_PATH","addresses","addressesByNetwork","SupportedChainId","MAINNET","currentTime","now","makerOrder","isOrderAsk","collection","strategy","STRATEGY_STANDARD_SALE","WETH","nonce","startTime","minPercentageToAsk","toNumber","params","signMakerOrder","LOOKSRARE_MARKETPLACE_CONTRACT","signatureHash","payload","signature","createLooksRareOrder","res","orderItem","isBundle","bundleName","bundleDesc","orderIds","changePrice","isCollection","newX2Y2Order","resp","getRarityStatus","rarityStatusCache","id","has","get","hasRarity","Array","reducer","rarity","set","getAssetHref","origin","getMarketplaceIcon","toLowerCase","calcPoolPrice","amountToBuy","marginalBuy","sellorders","ammFeePercent","protocolParameters","pow","ammFee","Markets","NFTX","sixteenmul","NFT20","ethReserves","poolMetadata","useGrouping","tokenReserves","numerator","denominator","marginalnumerator","marginaldenominator","marginalprice","recalculateBagUsingPooledAssets","uncheckedItemsInBag","some","every","BagItemStatus","REVIEWED","REVIEWING_PRICE_CHANGE","isPooledMarket","market","itemsInBag","possibleMarkets","markets","key","Object","keys","includes","push","updatedPriceMarkets","calculatedAvgPoolPrices","prices","numberOfAssets","total","calcAvgGroupPoolPrice","forEach","isPriceChangedAsset","calculatedPrice","indexOf","Set","isAudio","file","fileType","lastIndexOf","isVideo","path","extensions","ext","endsWith"],"mappings":"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","file":"static/js/1.47192794.chunk.js","sourcesContent":["export const buildSellObject = (amount: string) => {\n  return {\n    address: '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n    amount,\n    decimals: 18,\n    name: 'Ethereum',\n    priceInfo: {\n      baseAsset: 'ETH',\n      basePrice: amount,\n      ETHPrice: amount,\n    },\n    symbol: 'ETH',\n    tokenId: 'ETH',\n    tokenType: 'ERC20',\n  }\n}\n","export const calculateCardIndex = (x: number, l: number) => {\n  return (x < 0 ? x + l : x) % l\n}\n\nexport const calculateFirstCardIndex = (\n  i: number,\n  firstVis: number,\n  firstVisIdx: number,\n  idx: (x: number, l?: number) => number\n) => {\n  return idx(i - firstVis + firstVisIdx)\n}\n\nexport const calculateRank = (firstVis: number, firstVisIdx: number, position: number, l: number, y: number) => {\n  return firstVis - (y < 0 ? l : 0) + position - firstVisIdx + (y < 0 && firstVis === 0 ? l : 0)\n}\n","import { roundAndPluralize } from './roundAndPluralize'\n\nexport function timeSince(date: Date, min?: boolean) {\n  const seconds = Math.floor((new Date().getTime() - date.getTime()) / 1000)\n\n  let interval = seconds / 31536000\n\n  if (interval > 1) return roundAndPluralize(interval, min ? 'yr' : 'year')\n\n  interval = seconds / 2592000\n  if (interval > 1) return roundAndPluralize(interval, min ? 'mth' : 'month')\n\n  interval = seconds / 86400\n  if (interval > 1) return roundAndPluralize(interval, 'day')\n\n  interval = seconds / 3600\n\n  if (interval > 1) return roundAndPluralize(interval, min ? 'hr' : 'hour')\n\n  interval = seconds / 60\n  if (interval > 1) return roundAndPluralize(interval, 'min')\n\n  return roundAndPluralize(interval, 'sec')\n}\n\nconst MINUTE = 1000 * 60\nconst HOUR = MINUTE * 60\nconst DAY = 24 * HOUR\n\nexport const timeLeft = (targetDate: Date): string => {\n  const countDown = new Date(targetDate).getTime() - new Date().getTime()\n  const days = Math.floor(countDown / DAY)\n  const hours = Math.floor((countDown % DAY) / HOUR)\n  const minutes = Math.floor((countDown % HOUR) / MINUTE)\n\n  return `${days !== 0 ? roundAndPluralize(days, 'day') : ''} ${\n    hours !== 0 ? roundAndPluralize(hours, 'hour') : ''\n  } ${roundAndPluralize(minutes, 'minute')}`\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { TxResponse, UpdatedGenieAsset } from 'nft/types'\nimport { getTotalNftValue } from 'nft/utils'\n\n// Shortens a given txHash. With standard charsToShorten var of 4, a hash will become 0x1234...1234\nexport const shortenTxHash = (txHash: string, charsToShorten = 4, addCharsToBack = 0): string => {\n  return `${txHash.substring(0, charsToShorten + 2)}...${txHash.substring(\n    txHash.length - charsToShorten,\n    txHash.length - (charsToShorten + addCharsToBack)\n  )}`\n}\n\nexport const parseTransactionResponse = (transactionResponse: TxResponse | undefined, ethPrice: number) => {\n  let nftsPurchased: UpdatedGenieAsset[] = []\n  let nftsNotPurchased: UpdatedGenieAsset[] = []\n  let showPurchasedModal = false\n  let showRefundModal = false\n  let totalPurchaseValue = BigNumber.from(0)\n  let totalRefundValue = BigNumber.from(0)\n  let totalUSDRefund = 0\n  let txFeeFiat = 0\n\n  if (transactionResponse !== undefined) {\n    const { nftsPurchased: purchasedNfts, nftsNotPurchased: notPurchasedNfts, txReceipt } = transactionResponse\n    if (nftsPurchased && nftsNotPurchased && txReceipt) {\n      nftsPurchased = purchasedNfts\n      nftsNotPurchased = notPurchasedNfts\n      showPurchasedModal = nftsPurchased.length >= 1\n      showRefundModal = nftsNotPurchased.length >= 1\n      totalPurchaseValue = getTotalNftValue(nftsPurchased)\n      totalRefundValue = getTotalNftValue(nftsNotPurchased)\n      totalUSDRefund = totalRefundValue && parseFloat(formatEther(totalRefundValue)) * ethPrice\n      const txFee = BigNumber.from(txReceipt ? txReceipt.gasUsed : 0).mul(\n        BigNumber.from(txReceipt ? txReceipt.effectiveGasPrice : 0)\n      )\n      txFeeFiat = parseFloat(formatEther(txFee)) * ethPrice\n    }\n  }\n\n  return {\n    nftsPurchased,\n    nftsNotPurchased,\n    showPurchasedModal,\n    showRefundModal,\n    totalPurchaseValue,\n    totalRefundValue,\n    totalUSDRefund,\n    txFeeFiat,\n  }\n}\n\n// Given the length of the array of successfully purchased NFTs, returns the maxHeight and maxWidth of each asset preview\nexport const getSuccessfulImageSize = (numSuccessful: number, isMobile: boolean) => {\n  const sizeModifier = isMobile ? 2 : 1\n  if (numSuccessful === 1) {\n    return 574 / sizeModifier\n  } else if (numSuccessful === 2) {\n    return 280 / sizeModifier\n  } else if (numSuccessful === 3 || (numSuccessful >= 5 && numSuccessful < 7)) {\n    return 184 / sizeModifier\n  } else if (numSuccessful === 4 || (numSuccessful >= 7 && numSuccessful < 13)) {\n    return 136 / sizeModifier\n  } else if (numSuccessful >= 13 && numSuccessful < 21) {\n    return 108 / sizeModifier\n  } else return isMobile ? 39 : 64\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { UpdatedGenieAsset } from 'nft/types'\n\nexport const updatedAssetPriceDifference = (asset: UpdatedGenieAsset) => {\n  if (!asset.updatedPriceInfo) return BigNumber.from(0)\n  return BigNumber.from(asset.updatedPriceInfo.ETHPrice).sub(BigNumber.from(asset.priceInfo.ETHPrice))\n}\n\nexport const sortUpdatedAssets = (x: UpdatedGenieAsset, y: UpdatedGenieAsset) => {\n  return updatedAssetPriceDifference(x).gt(updatedAssetPriceDifference(y)) ? -1 : 1\n}\n\nexport const getTotalNftValue = (nfts: UpdatedGenieAsset[]): BigNumber => {\n  return (\n    nfts &&\n    nfts.reduce(\n      (ethTotal, nft) =>\n        ethTotal.add(BigNumber.from(nft.updatedPriceInfo ? nft.updatedPriceInfo.ETHPrice : nft.priceInfo.ETHPrice)),\n      BigNumber.from(0)\n    )\n  )\n}\n","export const roundAndPluralize = (i: number, word: string) => {\n  const rounded = Math.floor(i)\n\n  return `${rounded} ${word}${rounded === 1 ? '' : 's'}`\n}\n\nexport const pluralize = (number: number) => (number !== 1 ? 's' : '')\n","import { formatEther } from '@ethersproject/units'\nimport { GenieAsset } from 'nft/types'\nimport { useQuery } from 'react-query'\n\nexport enum Currency {\n  ETH = 'ETH',\n  LOOKS = 'LOOKS',\n  MATIC = 'MATIC',\n}\n\nexport const fetchPrice = async (currency: Currency = Currency.ETH): Promise<number | undefined> => {\n  try {\n    const response = await fetch(`https://api.coinbase.com/v2/exchange-rates?currency=${currency}`)\n    return response.json().then((j) => j.data.rates.USD)\n  } catch (e) {\n    console.error(e)\n    return\n  }\n}\n\nexport function useUsdPrice(asset: GenieAsset): string | undefined {\n  const { data: fetchedPriceData } = useQuery(['fetchPrice', {}], () => fetchPrice(), {})\n\n  return fetchedPriceData && asset?.priceInfo?.ETHPrice\n    ? (parseFloat(formatEther(asset?.priceInfo?.ETHPrice)) * fetchedPriceData).toString()\n    : ''\n}\n","import { DEFAULT_LOCALE } from 'constants/locales'\nimport numbro from 'numbro'\n\nexport const isNumber = (s: string): boolean => {\n  const reg = /^-?\\d+\\.?\\d*$/\n  return reg.test(s) && !isNaN(parseFloat(s)) && isFinite(parseFloat(s))\n}\n\nexport const formatPercentage = (percentage: string): string => {\n  if (!percentage) return '-'\n  return `${parseFloat(percentage)\n    .toFixed(2)\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}%`\n}\n\nexport const floorFormatter = (n: number): string => {\n  if (n === 0) return '0.00'\n  if (!n) return ''\n  if (n < 0.001) {\n    return '<0.001'\n  }\n  if (n >= 0.001 && n < 1) {\n    return `${parseFloat(n.toFixed(3)).toLocaleString(DEFAULT_LOCALE, {\n      minimumFractionDigits: 1,\n      maximumFractionDigits: 3,\n    })}`\n  }\n  if (n >= 1 && n < 1e6) {\n    return `${parseFloat(n.toPrecision(6)).toLocaleString(DEFAULT_LOCALE, {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2,\n    })}`\n  }\n  if (n >= 1e6 && n < 1e15) {\n    return numbro(n)\n      .format({\n        average: true,\n        mantissa: 2,\n        optionalMantissa: true,\n        abbreviations: {\n          million: 'M',\n          billion: 'B',\n          trillion: 'T',\n        },\n      })\n      .toUpperCase()\n  }\n  if (n >= 1e15) {\n    return `${n.toExponential(3).replace(/(\\.[0-9]*[1-9])0*|(\\.0*)/, '$1')}`\n  }\n  return `${Number(n.toFixed(2)).toLocaleString(DEFAULT_LOCALE, { minimumFractionDigits: 2 })}`\n}\n\nexport const volumeFormatter = (n: number): string => {\n  if (n === 0) return '0.00'\n  if (!n) return ''\n  if (n < 0.01) {\n    return '<0.01'\n  }\n  if (n >= 0.01 && n < 1) {\n    return `${parseFloat(n.toFixed(2)).toLocaleString(DEFAULT_LOCALE)}`\n  }\n  if (n >= 1 && n < 1000) {\n    return `${Number(Math.round(n).toLocaleString(DEFAULT_LOCALE))}`\n  }\n  if (n >= 1000) {\n    return numbro(n)\n      .format({\n        average: true,\n        mantissa: 1,\n        optionalMantissa: true,\n        abbreviations: {\n          thousand: 'K',\n          million: 'M',\n          billion: 'B',\n          trillion: 'T',\n        },\n      })\n      .toUpperCase()\n  }\n  return `${Number(n.toFixed(1)).toLocaleString(DEFAULT_LOCALE, { minimumFractionDigits: 1 })}`\n}\n\nexport const quantityFormatter = (n: number): string => {\n  if (n === 0) return '0.00'\n  if (!n) return ''\n  if (n >= 1 && n < 1000) {\n    return `${Number(Math.round(n).toLocaleString(DEFAULT_LOCALE))}`\n  }\n  if (n >= 1000) {\n    return numbro(n)\n      .format({\n        average: true,\n        mantissa: 1,\n        thousandSeparated: true,\n        optionalMantissa: true,\n        abbreviations: {\n          thousand: 'K',\n          million: 'M',\n          billion: 'B',\n          trillion: 'T',\n        },\n      })\n      .toUpperCase()\n  }\n  return `${Number(n.toFixed(2)).toLocaleString(DEFAULT_LOCALE, { minimumFractionDigits: 2 })}`\n}\n\nexport const roundWholePercentage = (n: number): string => {\n  if (n === 0) return '0'\n  if (!n) return ''\n  if (n < 1) {\n    return '<1'\n  }\n  return Math.round(n).toString()\n}\n","// change this if we change the fallback provider\nexport const fallbackProvider = 'PopRank'\nexport const shouldLinkToFallbackProvider = false\nexport const fallbackProviderLogo = '/nft/logos/poprank.png'\n\n/**\n * Add provider mappings based on provider name returned from the backend here\n */\nexport const rarityProviderLogo: { [key: string]: string } = {\n  'Rarity Sniper': '/nft/svgs/gem.svg',\n  Genie: fallbackProviderLogo,\n}\n\nexport const getRarityProviderLogo = (source?: string): string | undefined => {\n  if (!source) return undefined\n  return rarityProviderLogo[source] || fallbackProviderLogo\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { ActivityEvent, GenieAsset } from 'nft/types'\n\nexport const buildActivityAsset = (event: ActivityEvent, collectionName: string, ethPriceInUSD: number): GenieAsset => {\n  const assetUsdPrice = event.price\n    ? formatEther(\n        BigNumber.from(event.price)\n          .mul(BigNumber.from(Math.trunc(ethPriceInUSD * 100)))\n          .div(100)\n      )\n    : '0'\n\n  return {\n    address: event.collectionAddress,\n    collectionName,\n    imageUrl: event.tokenMetadata?.imageUrl,\n    marketplace: event.marketplace,\n    name: event.tokenMetadata?.name,\n    tokenId: event.tokenId,\n    susFlag: event.tokenMetadata?.suspiciousFlag,\n    smallImageUrl: event.tokenMetadata?.smallImageUrl,\n    collectionSymbol: event.symbol,\n    priceInfo: {\n      USDPrice: assetUsdPrice,\n      ETHPrice: event.price,\n      basePrice: event.price,\n      baseAsset: 'ETH',\n    },\n    tokenType: event.tokenMetadata?.standard,\n  } as GenieAsset\n}\n","import { GenieAsset } from 'nft/types'\n\nexport const formatAssetEventProperties = (assets: GenieAsset[]) => ({\n  collection_addresses: assets.map((asset) => asset.address),\n  token_ids: assets.map((asset) => asset.tokenId),\n  token_types: assets.map((asset) => asset.tokenType),\n})\n","import { defaultAbiCoder } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber'\nimport { hexZeroPad } from '@ethersproject/bytes'\nimport { AddressZero } from '@ethersproject/constants'\nimport { keccak256 } from '@ethersproject/keccak256'\nimport type { Web3Provider } from '@ethersproject/providers'\nimport { randomBytes } from '@ethersproject/random'\n\nconst dataParamType = `tuple(address token, uint256 tokenId)[]`\nconst orderItemParamType = `tuple(uint256 price, bytes data)`\nconst orderParamTypes = [\n  `uint256`,\n  `address`,\n  `uint256`,\n  `uint256`,\n  `uint256`,\n  `uint256`,\n  `address`,\n  `bytes`,\n  `uint256`,\n  `${orderItemParamType}[]`,\n]\nconst orderParamType = `tuple(uint256 salt, address user, uint256 network, uint256 intent, uint256 delegateType, uint256 deadline, address currency, bytes dataMask, ${orderItemParamType}[] items, bytes32 r, bytes32 s, uint8 v, uint8 signVersion)`\n\nexport type OfferItem = {\n  price: BigNumber\n  tokens: {\n    token: string\n    tokenId: BigNumberish\n  }[]\n}\n\ntype OrderItem = {\n  price: BigNumberish\n  data: string\n}\n\ntype Order = {\n  salt: BigNumberish\n  user: string\n  network: BigNumberish\n  intent: BigNumberish\n  delegateType: BigNumberish\n  deadline: BigNumberish\n  currency: string\n  dataMask: string\n  items: OrderItem[]\n  // signature\n  r: string\n  s: string\n  v: number\n  signVersion: number\n}\n\nexport type OrderPayload = {\n  order: string\n  isBundle: boolean\n  bundleName: string\n  bundleDesc: string\n  orderIds: number[]\n  changePrice: boolean\n  isCollection: boolean\n}\n\nexport type OrderResp = {\n  success: boolean\n  code: number\n  error?: string\n}\n\nconst randomSalt = () => {\n  const randomHex = BigNumber.from(randomBytes(16)).toHexString()\n  return hexZeroPad(randomHex, 64)\n}\n\nconst encodeItemData = (data: { token: string; tokenId: BigNumberish }[]) => {\n  return defaultAbiCoder.encode([dataParamType], [data])\n}\n\nexport const signOrderData = async (web3Provider: Web3Provider, order: Order) => {\n  const orderData = defaultAbiCoder.encode(orderParamTypes, [\n    order.salt,\n    order.user,\n    order.network,\n    order.intent,\n    order.delegateType,\n    order.deadline,\n    order.currency,\n    order.dataMask,\n    order.items.length,\n    order.items,\n  ])\n  const orderHash = keccak256(orderData)\n  const orderSig = (await web3Provider.send('personal_sign', [orderHash, order.user])) as string\n  order.r = `0x${orderSig.slice(2, 66)}`\n  order.s = `0x${orderSig.slice(66, 130)}`\n  order.v = parseInt(orderSig.slice(130, 132), 16)\n  fixSignature(order)\n}\n\nconst fixSignature = (data: Order) => {\n  // in geth its always 27/28, in ganache its 0/1. Change to 27/28 to prevent\n  // signature malleability if version is 0/1\n  // see https://github.com/ethereum/go-ethereum/blob/v1.8.23/internal/ethapi/api.go#L465\n  if (data.v < 27) {\n    data.v = data.v + 27\n  }\n}\n\nexport const encodeOrder = (order: Order): string => {\n  return defaultAbiCoder.encode([orderParamType], [order])\n}\n\nexport const createSellOrder = (user: string, deadline: number, items: OfferItem[]): Order => {\n  const salt = randomSalt()\n  const network = 1 // mainnet\n  const intent = 1 // INTENT_SELL\n  const delegateType = 1 // DELEGATION_TYPE_ERC721\n  const currency = AddressZero // ETH\n  return {\n    salt,\n    user,\n    network,\n    intent,\n    delegateType,\n    deadline,\n    currency,\n    dataMask: '0x',\n    items: items.map((item) => ({\n      price: item.price,\n      data: encodeItemData(item.tokens),\n    })),\n    r: '',\n    s: '',\n    v: 0,\n    signVersion: 1,\n  }\n}\n","import { Signer } from '@ethersproject/abstract-signer'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport type { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { parseEther } from '@ethersproject/units'\nimport { addressesByNetwork, MakerOrder, signMakerOrder, SupportedChainId } from '@looksrare/sdk'\nimport { Seaport } from '@opensea/seaport-js'\nimport { ItemType } from '@opensea/seaport-js/lib/constants'\nimport { ConsiderationInputItem } from '@opensea/seaport-js/lib/types'\nimport {\n  OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY,\n  OPENSEA_DEFAULT_ZONE,\n  OPENSEA_KEY_TO_CONDUIT,\n  OPENSEA_LISTINGS_API_PATH,\n} from 'nft/queries/openSea'\n\nimport ERC721 from '../../abis/erc721.json'\nimport { createLooksRareOrder, LOOKSRARE_MARKETPLACE_CONTRACT, newX2Y2Order, PostOpenSeaSellOrder } from '../queries'\nimport { INVERSE_BASIS_POINTS, OPENSEA_DEFAULT_FEE, OPENSEA_FEE_ADDRESS } from '../queries/openSea'\nimport { ListingMarket, ListingStatus, WalletAsset } from '../types'\nimport { createSellOrder, encodeOrder, OfferItem, OrderPayload, signOrderData } from './x2y2'\n\nexport const ListingMarkets: ListingMarket[] = [\n  {\n    name: 'LooksRare',\n    fee: 2.0,\n    icon: '/nft/svgs/marketplaces/looksrare.svg',\n  },\n  {\n    name: 'OpenSea',\n    fee: 2.5,\n    icon: '/nft/svgs/marketplaces/opensea.svg',\n  },\n  {\n    name: 'X2Y2',\n    fee: 0.5,\n    icon: '/nft/svgs/marketplaces/x2y2.svg',\n  },\n]\n\nconst createConsiderationItem = (basisPoints: string, recipient: string): ConsiderationInputItem => {\n  return {\n    amount: basisPoints,\n    recipient,\n  }\n}\n\nconst getConsiderationItems = (\n  asset: WalletAsset,\n  price: BigNumber,\n  signerAddress: string\n): {\n  sellerFee: ConsiderationInputItem\n  openseaFee: ConsiderationInputItem\n  creatorFee?: ConsiderationInputItem\n} => {\n  const openSeaBasisPoints = OPENSEA_DEFAULT_FEE * INVERSE_BASIS_POINTS\n  const creatorFeeBasisPoints = asset.creatorPercentage * INVERSE_BASIS_POINTS\n  const sellerBasisPoints = INVERSE_BASIS_POINTS - openSeaBasisPoints - creatorFeeBasisPoints\n\n  const openseaFee = price.mul(BigNumber.from(openSeaBasisPoints)).div(BigNumber.from(INVERSE_BASIS_POINTS)).toString()\n  const creatorFee = price\n    .mul(BigNumber.from(creatorFeeBasisPoints))\n    .div(BigNumber.from(INVERSE_BASIS_POINTS))\n    .toString()\n  const sellerFee = price.mul(BigNumber.from(sellerBasisPoints)).div(BigNumber.from(INVERSE_BASIS_POINTS)).toString()\n\n  return {\n    sellerFee: createConsiderationItem(sellerFee, signerAddress),\n    openseaFee: createConsiderationItem(openseaFee, OPENSEA_FEE_ADDRESS),\n    creatorFee:\n      creatorFeeBasisPoints > 0 ? createConsiderationItem(creatorFee, asset.asset_contract.payout_address) : undefined,\n  }\n}\n\nexport async function approveCollection(\n  operator: string,\n  collectionAddress: string,\n  signer: Signer,\n  setStatus: (newStatus: ListingStatus) => void\n): Promise<void> {\n  // This will work for both 721s & 1155s because they both have the\n  // setApprovalForAll() method\n  const ERC721Contract = new Contract(collectionAddress, ERC721, signer)\n  const signerAddress = await signer.getAddress()\n  setStatus(ListingStatus.PENDING)\n  try {\n    const approved = await ERC721Contract.isApprovedForAll(signerAddress, operator)\n    if (approved) {\n      setStatus(ListingStatus.APPROVED)\n      return\n    }\n\n    setStatus(ListingStatus.SIGNING)\n    const approvalTransaction = await ERC721Contract.setApprovalForAll(operator, true)\n\n    setStatus(ListingStatus.PENDING)\n    const tx = await approvalTransaction.wait()\n\n    tx.status === 1 ? setStatus(ListingStatus.APPROVED) : setStatus(ListingStatus.FAILED)\n  } catch (error) {\n    if (error.code === 4001) setStatus(ListingStatus.REJECTED)\n    else setStatus(ListingStatus.FAILED)\n  }\n}\n\nexport async function signListing(\n  marketplace: ListingMarket,\n  asset: WalletAsset,\n  signer: JsonRpcSigner,\n  provider: Web3Provider,\n  looksRareNonce = 0,\n  setStatus: (newStatus: ListingStatus) => void\n): Promise<boolean> {\n  const seaport = new Seaport(provider, {\n    conduitKeyToConduit: OPENSEA_KEY_TO_CONDUIT,\n    overrides: {\n      defaultConduitKey: OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY,\n    },\n  })\n\n  const signerAddress = await signer.getAddress()\n  const listingPrice = asset.newListings?.find((listing) => listing.marketplace.name === marketplace.name)?.price\n  if (!listingPrice || !asset.expirationTime) return false\n  switch (marketplace.name) {\n    case 'OpenSea':\n      try {\n        const listingInWei = parseEther(`${listingPrice}`)\n        const { sellerFee, openseaFee, creatorFee } = getConsiderationItems(asset, listingInWei, signerAddress)\n        const considerationItems = [sellerFee, openseaFee, creatorFee].filter(\n          (item): item is ConsiderationInputItem => item !== undefined\n        )\n\n        const { executeAllActions } = await seaport.createOrder(\n          {\n            offer: [\n              {\n                itemType: ItemType.ERC721,\n                token: asset.asset_contract.address,\n                identifier: asset.tokenId,\n                amount: '1',\n              },\n            ],\n            consideration: considerationItems,\n            endTime: asset.expirationTime.toString(),\n            zone: OPENSEA_DEFAULT_ZONE,\n            restrictedByZone: true,\n            allowPartialFills: true,\n          },\n          signerAddress\n        )\n\n        const order = await executeAllActions()\n        const res = await PostOpenSeaSellOrder(OPENSEA_LISTINGS_API_PATH, order)\n        if (res) setStatus(ListingStatus.APPROVED)\n        return true\n      } catch (error) {\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\n        else setStatus(ListingStatus.FAILED)\n        return false\n      }\n    case 'LooksRare':\n      const addresses = addressesByNetwork[SupportedChainId.MAINNET]\n      const currentTime = Math.round(Date.now() / 1000)\n      const makerOrder: MakerOrder = {\n        // true --> ask / false --> bid\n        isOrderAsk: true,\n        // signer address of the maker order\n        signer: signerAddress,\n        // collection address\n        collection: asset.asset_contract.address,\n        // Price in WEI\n        price: parseEther(listingPrice.toString()),\n        // Token ID\n        tokenId: BigNumber.from(asset.tokenId),\n        // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\n        amount: BigNumber.from(1),\n        // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice), see addresses in the SDK\n        strategy: addresses.STRATEGY_STANDARD_SALE,\n        // currency address\n        currency: addresses.WETH,\n        // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\n        nonce: BigNumber.from(looksRareNonce),\n        // startTime timestamp in seconds\n        startTime: BigNumber.from(currentTime),\n        // endTime timestamp in seconds\n        endTime: BigNumber.from(asset.expirationTime),\n        // minimum ratio to be received by the user (per 10000)\n        minPercentageToAsk: BigNumber.from(10000)\n          .sub(BigNumber.from(200).add(BigNumber.from(asset.creatorPercentage * 10000)))\n          .toNumber(),\n        // params (e.g., price, target account for private sale)\n        params: [],\n      }\n\n      try {\n        const signatureHash = await signMakerOrder(\n          signer,\n          SupportedChainId.MAINNET,\n          makerOrder,\n          LOOKSRARE_MARKETPLACE_CONTRACT\n        )\n        setStatus(ListingStatus.PENDING)\n        const payload = {\n          signature: signatureHash,\n          tokenId: asset.tokenId,\n          collection: asset.asset_contract.address,\n          strategy: addresses.STRATEGY_STANDARD_SALE,\n          currency: addresses.WETH,\n          signer: signerAddress,\n          isOrderAsk: true,\n          nonce: looksRareNonce,\n          amount: 1,\n          price: parseEther(listingPrice.toString()).toString(),\n          startTime: currentTime,\n          endTime: asset.expirationTime,\n          minPercentageToAsk: 10000 - (200 + asset.creatorPercentage * 10000),\n          params: [],\n        }\n        const res = await createLooksRareOrder(payload)\n        if (res) setStatus(ListingStatus.APPROVED)\n        return res\n      } catch (error) {\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\n        else setStatus(ListingStatus.FAILED)\n        return false\n      }\n\n    case 'X2Y2':\n      const orderItem: OfferItem = {\n        price: parseEther(listingPrice.toString()),\n        tokens: [\n          {\n            token: asset.asset_contract.address,\n            tokenId: BigNumber.from(parseFloat(asset.tokenId)),\n          },\n        ],\n      }\n      const order = createSellOrder(signerAddress, asset.expirationTime, [orderItem])\n      try {\n        await signOrderData(provider, order)\n        const payload: OrderPayload = {\n          order: encodeOrder(order),\n          isBundle: false,\n          bundleName: '',\n          bundleDesc: '',\n          orderIds: [],\n          changePrice: false,\n          isCollection: false,\n        }\n        setStatus(ListingStatus.PENDING)\n        // call server api\n        const resp = await newX2Y2Order(payload)\n        if (resp) setStatus(ListingStatus.APPROVED)\n        return resp\n      } catch (error) {\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\n        else setStatus(ListingStatus.FAILED)\n        return false\n      }\n\n    default:\n      return false\n  }\n}\n","import { DetailsOrigin, GenieAsset, WalletAsset } from 'nft/types'\n\nexport function getRarityStatus(\n  rarityStatusCache: Map<string, boolean>,\n  id: string,\n  assets?: (GenieAsset | undefined)[]\n) {\n  if (rarityStatusCache.has(id)) {\n    return rarityStatusCache.get(id)\n  }\n  const hasRarity = assets && Array.from(assets).reduce((reducer, asset) => !!(reducer || asset?.rarity), false)\n\n  if (hasRarity) {\n    rarityStatusCache.set(id, hasRarity)\n  }\n\n  return hasRarity\n}\n\nexport const getAssetHref = (asset: GenieAsset | WalletAsset, origin?: DetailsOrigin) => {\n  const address =\n    (asset as GenieAsset).address !== undefined\n      ? (asset as GenieAsset).address\n      : (asset as WalletAsset).asset_contract.address\n  return `/nfts/asset/${address}/${asset.tokenId}${origin ? `?origin=${origin}` : ''}`\n}\n\nexport const getMarketplaceIcon = (marketplace: string) => {\n  return `/nft/svgs/marketplaces/${marketplace.toLowerCase()}.svg`\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport {\n  BagItem,\n  BagItemStatus,\n  Deprecated_SellOrder,\n  GenieAsset,\n  Markets,\n  SellOrder,\n  UpdatedGenieAsset,\n} from 'nft/types'\n\n// TODO: a lot of the below typecasting logic can be simplified when GraphQL migration is complete\nexport const calcPoolPrice = (asset: GenieAsset, position = 0) => {\n  let amountToBuy: BigNumber = BigNumber.from(0)\n  let marginalBuy: BigNumber = BigNumber.from(0)\n  if (!asset.sellorders) return ''\n\n  const nft =\n    (asset.sellorders[0] as Deprecated_SellOrder).ammFeePercent === undefined\n      ? (asset.sellorders[0] as SellOrder).protocolParameters\n      : (asset.sellorders[0] as Deprecated_SellOrder)\n\n  const decimals = BigNumber.from(1).mul(10).pow(18)\n  const ammFee = nft.ammFeePercent ? (100 + (nft.ammFeePercent as number)) * 100 : 110 * 100\n\n  if (asset.marketplace === Markets.NFTX) {\n    const sixteenmul = BigNumber.from(1).mul(10).pow(16)\n    amountToBuy = BigNumber.from(ammFee)\n      .div(100)\n      .mul(position + 1)\n    amountToBuy = amountToBuy.mul(sixteenmul)\n\n    marginalBuy = BigNumber.from(ammFee).div(100).mul(position)\n    marginalBuy = marginalBuy.mul(sixteenmul)\n  }\n  if (asset.marketplace === Markets.NFT20) {\n    amountToBuy = BigNumber.from(100).mul(position + 1)\n    amountToBuy = amountToBuy.mul(decimals)\n\n    marginalBuy = BigNumber.from(100).mul(position)\n    marginalBuy = marginalBuy.mul(decimals)\n  }\n\n  const ethReserves = BigNumber.from(\n    (\n      (nft.ethReserves as number) ??\n      (\n        nft as Record<\n          string,\n          {\n            ethReserves: number\n          }\n        >\n      ).poolMetadata.ethReserves\n    )?.toLocaleString('fullwide', { useGrouping: false }) ?? 1\n  )\n  const tokenReserves = BigNumber.from(\n    (\n      (nft.tokenReserves as number) ??\n      (\n        nft as Record<\n          string,\n          {\n            tokenReserves: number\n          }\n        >\n      ).poolMetadata.tokenReserves\n    )?.toLocaleString('fullwide', { useGrouping: false }) ?? 1\n  )\n  const numerator = ethReserves.mul(amountToBuy).mul(1000)\n  const denominator = tokenReserves.sub(amountToBuy).mul(997)\n\n  const marginalnumerator = ethReserves.mul(marginalBuy).mul(1000)\n  const marginaldenominator = tokenReserves.sub(marginalBuy).mul(997)\n\n  let price = numerator.div(denominator)\n  const marginalprice = marginalnumerator.div(marginaldenominator)\n\n  price = price.sub(marginalprice)\n  price = price.mul(101).div(100)\n\n  return price.toString()\n}\n\nexport const calcAvgGroupPoolPrice = (asset: GenieAsset, numberOfAssets: number) => {\n  let total = BigNumber.from(0)\n\n  for (let i = 0; i < numberOfAssets; i++) {\n    const price = BigNumber.from(calcPoolPrice(asset, i))\n    total = total.add(price)\n  }\n\n  return total.div(numberOfAssets).toString()\n}\n\nexport const recalculateBagUsingPooledAssets = (uncheckedItemsInBag: BagItem[]) => {\n  if (\n    !uncheckedItemsInBag.some(\n      (item) => item.asset.marketplace === Markets.NFTX || item.asset.marketplace === Markets.NFT20\n    ) ||\n    uncheckedItemsInBag.every(\n      (item) => item.status === BagItemStatus.REVIEWED || item.status === BagItemStatus.REVIEWING_PRICE_CHANGE\n    )\n  )\n    return uncheckedItemsInBag\n\n  const isPooledMarket = (market: Markets) => market === Markets.NFTX || market === Markets.NFT20\n\n  const itemsInBag = [...uncheckedItemsInBag]\n  const possibleMarkets = itemsInBag.reduce((markets, item) => {\n    const asset = item.asset\n    const market = asset.marketplace\n    if (!market || !isPooledMarket(market)) return markets\n\n    const key = asset.address + asset.marketplace\n    if (Object.keys(markets).includes(key)) {\n      markets[key].push(asset.tokenId)\n    } else {\n      markets[key] = [asset.tokenId]\n    }\n    return markets\n  }, {} as { [key: string]: [string] })\n\n  const updatedPriceMarkets = itemsInBag.reduce((markets, item) => {\n    const asset = item.asset\n    const market = asset.marketplace\n    if (!market || !asset.updatedPriceInfo || !isPooledMarket(market)) return markets\n\n    const key = asset.address + asset.marketplace\n    if (Object.keys(markets).includes(key)) {\n      markets[key] = [markets[key][0] + 1, asset]\n    } else {\n      markets[key] = [1, asset]\n    }\n    return markets\n  }, {} as { [key: string]: [number, UpdatedGenieAsset] })\n\n  const calculatedAvgPoolPrices = Object.keys(updatedPriceMarkets).reduce((prices, key) => {\n    prices[key] = calcAvgGroupPoolPrice(updatedPriceMarkets[key][1], updatedPriceMarkets[key][0])\n    return prices\n  }, {} as { [key: string]: string })\n\n  itemsInBag.forEach((item) => {\n    if (item.asset.marketplace)\n      if (isPooledMarket(item.asset.marketplace)) {\n        const asset = item.asset\n        const isPriceChangedAsset = !!asset.updatedPriceInfo\n\n        const calculatedPrice = isPriceChangedAsset\n          ? calculatedAvgPoolPrices[asset.address + asset.marketplace]\n          : calcPoolPrice(asset, possibleMarkets[asset.address + asset.marketplace].indexOf(item.asset.tokenId))\n\n        if (isPriceChangedAsset && item.asset.updatedPriceInfo)\n          item.asset.updatedPriceInfo.ETHPrice = item.asset.updatedPriceInfo.basePrice = calculatedPrice\n        else item.asset.priceInfo.ETHPrice = calculatedPrice\n      }\n  })\n\n  return itemsInBag\n}\n","const set = new Set<string>(['mp3', 'wav'])\n\nexport const isAudio = (file: string) => {\n  if (!file) return false\n\n  const fileType = file.substring(file.lastIndexOf('.') + 1)\n\n  return set.has(fileType)\n}\n","import extensions from 'video-extensions'\n\nexport const isVideo = (path: string | null) => extensions.find((ext) => path?.endsWith(`.${ext}`)) !== undefined\n"],"sourceRoot":""}