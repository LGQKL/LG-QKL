{"version":3,"sources":["nft/components/explore/Carousel.tsx","nft/components/explore/CarouselCard.tsx","nft/components/explore/Banner.tsx","nft/utils/toSignificant.ts","nft/components/explore/CollectionTable.tsx","nft/components/explore/Cells/Cells.tsx","nft/components/explore/Cells/Cells.css.ts","nft/components/explore/Explore.css.ts","nft/components/explore/Table.tsx","nft/components/explore/TrendingCollections.tsx","nft/pages/explore/index.tsx"],"names":["CarouselContainer","styled","div","theme","breakpoint","sm","CarouselCardContainer","CarouselCard","a","md","IconContainer","right","undefined","textPrimary","opacity","hover","Carousel","children","width","useWindowSize","carouselCardContainerRef","useRef","useState","cardWidth","setCardWidth","useReducer","state","resetTimer","toggleResetTimer","useEffect","current","Math","min","offsetWidth","idx","useCallback","x","l","length","calculateCardIndex","getPos","i","firstVis","firstVisIdx","calculateFirstCardIndex","useSprings","springs","set","prev","runSprings","y","vy","floor","position","prevPosition","rank","calculateRank","immediate","config","tension","friction","index","toggleSlide","next","offset","interval","setInterval","clearInterval","onClick","height","ref","map","style","backgroundSurface","backgroundOutline","deepShadow","CardHeaderContainer","src","LoadingCardHeaderContainer","loadingAnimation","backgroundInteractive","CardHeaderRow","CardNameRow","CollectionNameContainer","LoadingCollectionNameContainer","LoadingBubble","HeaderOverlay","CollectionImage","img","accentTextLightPrimary","LoadingCollectionImage","CardBottomContainer","lg","HeaderRow","userThemeColor","LoadingTableElement","TableElement","textSecondary","MarketplaceRow","marketplace","listings","MARKETS_TO_CHECK","Markets","Opensea","X2Y2","LooksRare","MARKETS_ENUM_TO_NAME","collection","useQuery","address","CollectionStatsFetcher","refetchOnWindowFocus","refetchOnMount","refetchOnReconnect","collectionStats","data","isLoading","useTheme","bannerImageUrl","imageUrl","MediumHeader","color","fontWeight","lineHeight","name","isVerified","formatWeiToDecimal","toString","marketplaceCount","reduce","acc","cur","count","market","find","LoadingTable","Array","LoadingCarouselCard","BannerContainer","HeaderContainer","Banner","navigate","useNavigate","isMobile","useIsMobile","collections","fetchTrendingCollections","volumeType","timePeriod","TimePeriod","OneDay","size","ColumnHeaders","CollectionName","TruncatedSubHeader","ThemedText","SubHeader","RoundedImage","backgroundModule","ChangeCellContainer","change","accentSuccess","accentFailure","EthContainer","CollectionTitleCell","value","logo","className","DiscreteNumberCell","volumeFormatter","getDenominatedValue","denomination","inWei","usdPrice","Denomination","ETH","parseFloat","formatEther","EthCell","denominatedValue","formattedValue","ethNumberStandardFormatter","BodyPrimary","VolumeCell","ChangeCell","abs","round","table","thead","th","RankCellContainer","StyledRow","tr","stateOverlayHover","stateOverlayPressed","StyledLoadingRow","StyledHeader","isFirstHeader","click","StyledLoadingHolder","StyledCollectionNameHolder","StyledImageHolder","StyledRankHolder","Table","columns","smallHiddenColumns","mediumHiddenColumns","largeHiddenColumns","classNames","props","useTable","initialState","sortBy","desc","id","Volume","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setHiddenColumns","visibleColumns","styles","headerGroup","getHeaderGroupProps","key","headers","column","getHeaderProps","getSortByToggleProps","textAlign","paddingLeft","Box","as","isSorted","isSortedDesc","transform","render","row","getRowProps","original","cells","cell","cellIndex","clsx","td","getCellProps","BodySecondary","fontSize","_","compareFloats","b","CollectionTable","floorSort","useMemo","rowA","rowB","aFloor","BigNumber","from","bFloor","gte","floorChangeSort","volumeSort","volume","volumeChangeSort","Header","accessor","Cell","disableSortBy","Floor","sortType","FloorChange","sortDescFirst","VolumeChange","Items","totalSupply","Owners","owners","timeOptions","label","SevenDays","ThirtyDays","AllTime","ExploreContainer","FiltersRow","Filter","Selector","active","StyledSelectorText","TrendingCollections","setTimePeriod","isEthToggled","setEthToggled","refetchInterval","isSuccess","fetchPrice","trendingCollections","d","volumeChange","type","floorChange","ownersChange","sales","USD","timeOption","NftExplore","Trace","page","PageName","NFT_EXPLORE_PAGE","shouldLogImpression"],"mappings":"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","file":"static/js/19.f68ef075.chunk.js","sourcesContent":["import { useWindowSize } from 'hooks/useWindowSize'\nimport { ChevronLeftIcon } from 'nft/components/icons'\nimport { calculateCardIndex, calculateFirstCardIndex, calculateRank } from 'nft/utils'\nimport { ReactNode, useCallback, useEffect, useReducer, useRef, useState } from 'react'\nimport { a, useSprings } from 'react-spring'\nimport styled from 'styled-components/macro'\n\nconst CarouselContainer = styled.div`\n  display: flex;\n  max-width: 592px;\n  width: 100%;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    height: 320px;\n  }\n`\n\nconst CarouselCardContainer = styled.div`\n  max-width: 512px;\n  position: relative;\n  width: 100%;\n  overflow-x: hidden;\n`\n\nconst CarouselCard = styled(a.div)`\n  position: absolute;\n  padding-left: 16px;\n  padding-right: 16px;\n  display: flex;\n  top: 3px;\n  height: 280px;\n  will-change: transform;\n  justify-content: center;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    height: 296px;\n  }\n`\n\nconst IconContainer = styled.div<{ right?: boolean }>`\n  display: flex;\n  height: 280px;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  padding: 8px;\n  ${({ right }) => (right ? 'transform: rotate(180deg)' : undefined)};\n  color: ${({ theme }) => theme.textPrimary};\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    height: 296px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    display: none;\n  }\n`\n\ninterface CarouselProps {\n  children: ReactNode[]\n}\n\nconst FIRST_CARD_OFFSET = 0\nconst MAX_CARD_WIDTH = 512\n\nexport const Carousel = ({ children }: CarouselProps) => {\n  const { width } = useWindowSize()\n  const carouselCardContainerRef = useRef<HTMLDivElement>(null)\n  const [cardWidth, setCardWidth] = useState(MAX_CARD_WIDTH)\n  const [resetTimer, toggleResetTimer] = useReducer((state) => !state, false)\n\n  useEffect(() => {\n    if (carouselCardContainerRef.current) {\n      setCardWidth(Math.min(carouselCardContainerRef.current.offsetWidth, MAX_CARD_WIDTH))\n    }\n  }, [width])\n\n  const idx = useCallback((x: number, l = children.length) => calculateCardIndex(x, l), [children])\n  const getPos = useCallback(\n    (i: number, firstVis: number, firstVisIdx: number) => calculateFirstCardIndex(i, firstVis, firstVisIdx, idx),\n    [idx]\n  )\n  const [springs, set] = useSprings(children.length, (i) => ({\n    x: (i < children.length - 1 ? i : -1) * cardWidth + FIRST_CARD_OFFSET,\n  }))\n  const prev = useRef([0, 1])\n\n  const runSprings = useCallback(\n    (y: number, vy: number) => {\n      const firstVis = idx(Math.floor(y / cardWidth) % children.length)\n      const firstVisIdx = vy < 0 ? children.length - 2 : 1\n      set((i) => {\n        const position = getPos(i, firstVis, firstVisIdx)\n        const prevPosition = getPos(i, prev.current[0], prev.current[1])\n        const rank = calculateRank(firstVis, firstVisIdx, position, children.length, y)\n        return {\n          x: (-y % (cardWidth * children.length)) + cardWidth * rank + FIRST_CARD_OFFSET,\n          immediate: vy < 0 ? prevPosition > position : prevPosition < position,\n          config: { tension: 250, friction: 30 },\n        }\n      })\n      prev.current = [firstVis, firstVisIdx]\n    },\n    [idx, getPos, set, cardWidth, children.length]\n  )\n\n  useEffect(() => {\n    runSprings(index.current, 0)\n  }, [runSprings])\n\n  const index = useRef(0)\n\n  const toggleSlide = useCallback(\n    (next: -1 | 1) => {\n      const offset = cardWidth * next\n      index.current += offset\n\n      runSprings(index.current, next)\n      toggleResetTimer()\n    },\n    [runSprings, cardWidth]\n  )\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      toggleSlide(1)\n    }, 7_000)\n    return () => {\n      clearInterval(interval)\n    }\n  }, [toggleSlide, resetTimer])\n\n  return (\n    <CarouselContainer>\n      <IconContainer onClick={() => toggleSlide(-1)}>\n        <ChevronLeftIcon width=\"16px\" height=\"16px\" />\n      </IconContainer>\n      <CarouselCardContainer ref={carouselCardContainerRef}>\n        {springs.map(({ x }, i) => (\n          <CarouselCard\n            key={i}\n            style={{\n              width: cardWidth,\n              x,\n            }}\n          >\n            {children[i]}\n          </CarouselCard>\n        ))}\n      </CarouselCardContainer>\n      <IconContainer right onClick={() => toggleSlide(1)}>\n        <ChevronLeftIcon width=\"16px\" height=\"16px\" />\n      </IconContainer>\n    </CarouselContainer>\n  )\n}\n","import { loadingAnimation } from 'components/Loader/styled'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { CollectionStatsFetcher } from 'nft/queries'\nimport { Markets, TrendingCollection } from 'nft/types'\nimport { formatWeiToDecimal } from 'nft/utils'\nimport { useQuery } from 'react-query'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nconst CarouselCardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  border-radius: 20px;\n  outline: 1px solid ${({ theme }) => theme.backgroundOutline};\n  width: 100%;\n  cursor: pointer;\n  overflow: hidden;\n\n  :hover {\n    outline: 3px solid ${({ theme }) => theme.backgroundOutline};\n    box-shadow: ${({ theme }) => theme.deepShadow};\n  }\n`\n\nconst CardHeaderContainer = styled.div<{ src: string }>`\n  position: relative;\n  width: 100%;\n  height: 108px;\n  padding-top: 32px;\n  padding-bottom: 16px;\n  padding-left: 28px;\n  padding-right: 28px;\n  background-image: ${({ src }) => `url(${src})`};\n  background-size: cover;\n  background-position: center;\n`\n\nconst LoadingCardHeaderContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: 108px;\n  padding-top: 32px;\n  padding-bottom: 16px;\n  padding-left: 28px;\n  padding-right: 28px;\n  animation: ${loadingAnimation} 1.5s infinite;\n  animation-fill-mode: both;\n  background: linear-gradient(\n    to left,\n    ${({ theme }) => theme.backgroundInteractive} 25%,\n    ${({ theme }) => theme.backgroundOutline} 50%,\n    ${({ theme }) => theme.backgroundInteractive} 75%\n  );\n  will-change: background-position;\n  background-size: 400%;\n`\n\nconst CardHeaderRow = styled.div`\n  position: relative;\n  z-index: 1;\n  display: flex;\n  gap: 12px;\n  align-items: center;\n`\n\nconst CardNameRow = styled.div`\n  display: flex;\n  gap: 2px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\nconst IconContainer = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n`\n\nconst CollectionNameContainer = styled.div`\n  display: flex;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst LoadingCollectionNameContainer = styled(LoadingBubble)`\n  width: 50%;\n`\n\nconst HeaderOverlay = styled.div`\n  position: absolute;\n  height: 108px;\n  top: 0px;\n  right: 0px;\n  left: 0px;\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 100%, rgba(0, 0, 0, 0.08));\n  z-index: 0;\n`\n\nconst CollectionImage = styled.img`\n  width: 60px;\n  height: 60px;\n  background: ${({ theme }) => theme.accentTextLightPrimary};\n  border: 2px solid ${({ theme }) => theme.accentTextLightPrimary};\n  border-radius: 100px;\n`\n\nconst LoadingCollectionImage = styled.div`\n  width: 60px;\n  height: 60px;\n  border-radius: 100px;\n  animation: ${loadingAnimation} 1.5s infinite;\n  animation-fill-mode: both;\n  background: linear-gradient(\n    to left,\n    ${({ theme }) => theme.backgroundInteractive} 25%,\n    ${({ theme }) => theme.backgroundOutline} 50%,\n    ${({ theme }) => theme.backgroundInteractive} 75%\n  );\n  will-change: background-position;\n  background-size: 400%;\n`\n\nconst CardBottomContainer = styled.div`\n  display: grid;\n  grid-template-columns: auto auto auto;\n  row-gap: 16px;\n  column-gap: 20px;\n  padding-right: 28px;\n  padding-left: 28px;\n  padding-bottom: 20px;\n  justify-content: space-between;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.lg}px`}) {\n    row-gap: 12px;\n  }\n`\n\nconst HeaderRow = styled.div`\n  color: ${({ theme }) => theme.userThemeColor};\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 500;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.lg}px`}) {\n    row-gap: 12px;\n    font-size: 14px;\n    line-height: 20px;\n  }\n`\n\nconst LoadingTableElement = styled(LoadingBubble)`\n  width: 50px;\n`\n\nconst TableElement = styled.div`\n  color: ${({ theme }) => theme.textSecondary};\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 20px;\n`\n\ninterface MarketplaceRowProps {\n  marketplace: string\n  floor?: string\n  listings?: string\n}\n\nexport const MarketplaceRow = ({ marketplace, floor, listings }: MarketplaceRowProps) => {\n  return (\n    <>\n      <TableElement>{marketplace}</TableElement>\n      <TableElement>{floor ?? '-'}</TableElement>\n      <TableElement>{listings ?? '-'}</TableElement>\n    </>\n  )\n}\n\ninterface CarouselCardProps {\n  collection: TrendingCollection\n  onClick: () => void\n}\n\nconst MARKETS_TO_CHECK = [Markets.Opensea, Markets.X2Y2, Markets.LooksRare] as const\nconst MARKETS_ENUM_TO_NAME = {\n  [Markets.Opensea]: 'OpenSea',\n  [Markets.X2Y2]: 'X2Y2',\n  [Markets.LooksRare]: 'LooksRare',\n}\n\nexport const CarouselCard = ({ collection, onClick }: CarouselCardProps) => {\n  const { data: collectionStats, isLoading } = useQuery(\n    ['trendingCollectionStats', collection.address],\n    () => CollectionStatsFetcher(collection.address),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      refetchOnReconnect: false,\n    }\n  )\n\n  const theme = useTheme()\n\n  return (\n    <CarouselCardContainer onClick={onClick}>\n      <CardHeaderContainer src={collection.bannerImageUrl}>\n        <CardHeaderRow>\n          <CollectionImage src={collection.imageUrl} />\n          <CardNameRow>\n            <CollectionNameContainer>\n              <ThemedText.MediumHeader color={theme.accentTextLightPrimary} fontWeight=\"500\" lineHeight=\"28px\">\n                {collection.name}\n              </ThemedText.MediumHeader>\n            </CollectionNameContainer>\n            {collection.isVerified && (\n              <IconContainer>\n                <VerifiedIcon width=\"24px\" height=\"24px\" />\n              </IconContainer>\n            )}\n          </CardNameRow>\n        </CardHeaderRow>\n        <HeaderOverlay />\n      </CardHeaderContainer>\n      <CardBottomContainer>\n        {isLoading || !collectionStats ? (\n          <LoadingTable />\n        ) : (\n          <>\n            <HeaderRow>Uniswap</HeaderRow>\n            <HeaderRow>{formatWeiToDecimal(collection.floor.toString())} ETH Floor</HeaderRow>\n            <HeaderRow>{collectionStats.marketplaceCount?.reduce((acc, cur) => acc + cur.count, 0)} Listings</HeaderRow>\n            {MARKETS_TO_CHECK.map((market) => {\n              const marketplace = collectionStats.marketplaceCount?.find(\n                (marketplace) => marketplace.marketplace === market\n              )\n              return (\n                <MarketplaceRow\n                  key={'trendingCollection' + collection.address}\n                  marketplace={MARKETS_ENUM_TO_NAME[market]}\n                  listings={marketplace?.count.toString()}\n                />\n              )\n            })}\n          </>\n        )}\n      </CardBottomContainer>\n    </CarouselCardContainer>\n  )\n}\n\nconst DEFAULT_TABLE_ELEMENTS = 12\n\nexport const LoadingTable = () => {\n  return (\n    <>\n      {[...Array(DEFAULT_TABLE_ELEMENTS)].map((index) => (\n        <LoadingTableElement key={index} />\n      ))}\n    </>\n  )\n}\n\nexport const LoadingCarouselCard = () => {\n  return (\n    <CarouselCardContainer>\n      <LoadingCardHeaderContainer>\n        <CardHeaderRow>\n          <LoadingCollectionImage />\n          <LoadingCollectionNameContainer />\n        </CardHeaderRow>\n        <HeaderOverlay />\n      </LoadingCardHeaderContainer>\n      <CardBottomContainer>\n        <LoadingTable />\n      </CardBottomContainer>\n    </CarouselCardContainer>\n  )\n}\n","import { useIsMobile } from 'nft/hooks'\nimport { fetchTrendingCollections } from 'nft/queries'\nimport { TimePeriod } from 'nft/types'\nimport { useQuery } from 'react-query'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nimport { Carousel } from './Carousel'\nimport { CarouselCard, LoadingCarouselCard } from './CarouselCard'\n\nconst BannerContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 320px;\n  margin-top: 24px;\n  gap: 36px;\n  max-width: 1200px;\n  justify-content: space-between;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    flex-direction: column;\n    height: 100%;\n    gap: 14px;\n    margin-top: 4px;\n    margin-bottom: 6px;\n  }\n`\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  max-width: 500px;\n  font-weight: 500;\n  font-size: 60px;\n  line-height: 73px;\n  justify-content: start;\n  align-items: start;\n  padding-top: 40px;\n  flex-shrink: 0;\n  background: linear-gradient(180deg, rgba(255, 255, 255, 0.4) 0%, rgba(255, 255, 255, 0) 100%), #fc72ff;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  text-fill-color: transparent;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.lg}px`}) {\n    font-size: 48px;\n    line-height: 67px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    font-size: 36px;\n    line-height: 50px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    font-size: 20px;\n    line-height: 28px;\n    justify-content: center;\n    align-items: center;\n    padding-top: 0px;\n  }\n`\nconst DEFAULT_TRENDING_COLLECTION_QUERY_AMOUNT = 5\n\nconst Banner = () => {\n  const navigate = useNavigate()\n  const isMobile = useIsMobile()\n\n  const { data: collections } = useQuery(\n    ['trendingCollections'],\n    () => {\n      return fetchTrendingCollections({ volumeType: 'eth', timePeriod: TimePeriod.OneDay, size: 5 })\n    },\n    {\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    }\n  )\n\n  return (\n    <BannerContainer>\n      <HeaderContainer>\n        Best price. {!isMobile && <br />}\n        Every listing.\n      </HeaderContainer>\n      {collections ? (\n        <Carousel>\n          {collections.map((collection) => (\n            <CarouselCard\n              key={collection.address}\n              collection={collection}\n              onClick={() => navigate(`/nfts/collection/${collection.address}`)}\n            />\n          ))}\n        </Carousel>\n      ) : (\n        <Carousel>\n          {[...Array(DEFAULT_TRENDING_COLLECTION_QUERY_AMOUNT)].map((index) => (\n            <LoadingCarouselCard key={'carouselCard' + index} />\n          ))}\n        </Carousel>\n      )}\n    </BannerContainer>\n  )\n}\n\nexport default Banner\n","/**\n * Format number in human-readable way\n * @example\n * ```js\n * nFormat(134_256) // => 134K\n * ```\n * @param num number to format\n * @param digits digits after decimal point\n * @returns formatted number string\n */\nexport function nFormat(num: number, digits = 0): string {\n  const lookup = [\n    { value: 1, symbol: '' },\n    //{ value: 1e3, symbol: 'K' },\n    { value: 1e6, symbol: 'M' },\n    { value: 1e9, symbol: 'B' },\n    { value: 1e12, symbol: 'T' },\n    { value: 1e15, symbol: 'Qa' },\n    { value: 1e18, symbol: 'Qi' },\n  ]\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/\n  const item = lookup\n    .slice()\n    .reverse()\n    .find((item) => num >= item.value)\n  return item ? (num / item.value).toFixed(digits).replace(rx, '$1') + item.symbol : '0'\n}\n\n/**\n * Rounds a number to significant 4-digit number\n * @param n number\n * @param precision\n * @returns formatted number\n */\nexport const toSignificant = (n: string, precision = 4): string => {\n  const floatBal = parseFloat(n)\n\n  if (floatBal > 9999) return nFormat(floatBal, 0)\n\n  return floatBal.toPrecision(precision)\n}\n\n/**\n * Formats percent change values\n * @param v number\n * @returns formatted number\n */\nexport const formatChange = (v: number) => {\n  if (v >= 98) return nFormat(v, 2)\n  else if (v <= 0.1) return v.toFixed(2)\n  else return v.toPrecision(2)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { useMemo } from 'react'\nimport { CellProps, Column, Row } from 'react-table'\n\nimport { CollectionTableColumn } from '../../types'\nimport { ChangeCell, CollectionTitleCell, DiscreteNumberCell, EthCell, VolumeCell } from './Cells/Cells'\nimport { Table } from './Table'\n\nexport enum ColumnHeaders {\n  Volume = 'Volume',\n  VolumeChange = 'Volume change',\n  Floor = 'Floor',\n  FloorChange = 'Floor change',\n  Sales = 'Sales',\n  Items = 'Items',\n  Owners = 'Owners',\n}\n\nconst compareFloats = (a: number, b: number): 1 | -1 => {\n  return Math.round(a * 100000) >= Math.round(b * 100000) ? 1 : -1\n}\n\nconst CollectionTable = ({ data }: { data: CollectionTableColumn[] }) => {\n  const floorSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      const aFloor = BigNumber.from(rowA.original.floor.value)\n      const bFloor = BigNumber.from(rowB.original.floor.value)\n\n      return aFloor.gte(bFloor) ? 1 : -1\n    }\n  }, [])\n\n  const floorChangeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.floor.change, rowB.original.floor.change)\n    }\n  }, [])\n\n  const volumeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.volume.value, rowB.original.volume.value)\n    }\n  }, [])\n\n  const volumeChangeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.volume.change, rowB.original.volume.change)\n    }\n  }, [])\n\n  const columns: Column<CollectionTableColumn>[] = useMemo(\n    () => [\n      {\n        Header: 'Collection name',\n        accessor: 'collection',\n        Cell: CollectionTitleCell,\n        disableSortBy: true,\n      },\n      {\n        id: ColumnHeaders.Floor,\n        Header: ColumnHeaders.Floor,\n        accessor: ({ floor }) => floor.value,\n        sortType: floorSort,\n        Cell: function ethCell(cell: CellProps<CollectionTableColumn>) {\n          return (\n            <EthCell\n              value={cell.row.original.floor.value}\n              denomination={cell.row.original.denomination}\n              usdPrice={cell.row.original.usdPrice}\n            />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.FloorChange,\n        Header: ColumnHeaders.FloorChange,\n        accessor: ({ floor }) => floor.value,\n        sortDescFirst: true,\n        sortType: floorChangeSort,\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\n          return <ChangeCell change={cell.row.original.floor.change} />\n        },\n      },\n      {\n        id: ColumnHeaders.Volume,\n        Header: ColumnHeaders.Volume,\n        accessor: ({ volume }) => volume.value,\n        sortDescFirst: true,\n        sortType: volumeSort,\n        Cell: function volumeCell(cell: CellProps<CollectionTableColumn>) {\n          return (\n            <VolumeCell\n              value={cell.row.original.volume.value}\n              denomination={cell.row.original.denomination}\n              usdPrice={cell.row.original.usdPrice}\n            />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.VolumeChange,\n        Header: ColumnHeaders.VolumeChange,\n        accessor: ({ volume }) => volume.value,\n        sortDescFirst: true,\n        sortType: volumeChangeSort,\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\n          return <ChangeCell change={cell.row.original.volume.change} />\n        },\n      },\n      {\n        id: ColumnHeaders.Items,\n        Header: ColumnHeaders.Items,\n        accessor: 'totalSupply',\n        sortDescFirst: true,\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\n          return <DiscreteNumberCell value={{ value: cell.row.original.totalSupply }} />\n        },\n      },\n      {\n        Header: ColumnHeaders.Owners,\n        accessor: ({ owners }) => owners.value,\n        sortDescFirst: true,\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\n          return <DiscreteNumberCell value={cell.row.original.owners} />\n        },\n      },\n    ],\n    [floorChangeSort, floorSort, volumeChangeSort, volumeSort]\n  )\n  return (\n    <>\n      <Table\n        smallHiddenColumns={[\n          ColumnHeaders.Items,\n          ColumnHeaders.FloorChange,\n          ColumnHeaders.Volume,\n          ColumnHeaders.VolumeChange,\n          ColumnHeaders.Owners,\n        ]}\n        mediumHiddenColumns={[\n          ColumnHeaders.Items,\n          ColumnHeaders.FloorChange,\n          ColumnHeaders.VolumeChange,\n          ColumnHeaders.Owners,\n        ]}\n        largeHiddenColumns={[ColumnHeaders.Items, ColumnHeaders.Owners]}\n        {...{ data, columns }}\n      />\n    </>\n  )\n}\n\nexport default CollectionTable\n","import { formatEther } from '@ethersproject/units'\nimport { SquareArrowDownIcon, SquareArrowUpIcon, VerifiedIcon } from 'nft/components/icons'\nimport { Denomination } from 'nft/types'\nimport { volumeFormatter } from 'nft/utils'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from '../../../utils/currency'\nimport { formatChange } from '../../../utils/toSignificant'\nimport { Box } from '../../Box'\nimport { Column, Row } from '../../Flex'\nimport * as styles from './Cells.css'\n\nconst CollectionNameContainer = styled.div`\n  display: flex;\n  padding: 14px 0px 14px 8px;\n  align-items: center;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst CollectionName = styled.div`\n  margin-left: 8px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst TruncatedSubHeader = styled(ThemedText.SubHeader)`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst RoundedImage = styled.div<{ src?: string }>`\n  height: 36px;\n  width: 36px;\n  border-radius: 36px;\n  background: ${({ src, theme }) => (src ? `url(${src})` : theme.backgroundModule)};\n  background-size: cover;\n  background-position: center;\n  flex-shrink: 0;\n`\n\nconst ChangeCellContainer = styled.div<{ change: number }>`\n  display: flex;\n  color: ${({ theme, change }) => (change >= 0 ? theme.accentSuccess : theme.accentFailure)};\n  justify-content: end;\n  align-items: center;\n  gap: 2px;\n`\n\nconst EthContainer = styled.div`\n  display: flex;\n  justify-content: end;\n`\n\ninterface CellProps {\n  value: {\n    logo?: string\n    name?: string\n    address?: string\n    isVerified?: boolean\n    value?: number\n    change?: number\n  }\n}\n\nexport const CollectionTitleCell = ({ value }: CellProps) => {\n  return (\n    <CollectionNameContainer>\n      <RoundedImage src={value.logo} />\n      <CollectionName>\n        <TruncatedSubHeader>{value.name}</TruncatedSubHeader>\n      </CollectionName>\n      {value.isVerified && (\n        <span className={styles.verifiedBadge}>\n          <VerifiedIcon />\n        </span>\n      )}\n    </CollectionNameContainer>\n  )\n}\n\nexport const DiscreteNumberCell = ({ value }: CellProps) => (\n  <span>{value.value ? volumeFormatter(value.value) : '-'}</span>\n)\n\nconst getDenominatedValue = (denomination: Denomination, inWei: boolean, value?: number, usdPrice?: number) => {\n  if (denomination === Denomination.ETH) return value\n  if (usdPrice && value) return usdPrice * (inWei ? parseFloat(formatEther(value)) : value)\n\n  return undefined\n}\n\nexport const EthCell = ({\n  value,\n  denomination,\n  usdPrice,\n}: {\n  value?: number\n  denomination: Denomination\n  usdPrice?: number\n}) => {\n  const denominatedValue = getDenominatedValue(denomination, true, value, usdPrice)\n  const formattedValue = denominatedValue\n    ? denomination === Denomination.ETH\n      ? formatWeiToDecimal(denominatedValue.toString(), true) + ' ETH'\n      : ethNumberStandardFormatter(denominatedValue, true, false, true)\n    : '-'\n\n  return (\n    <EthContainer>\n      <ThemedText.BodyPrimary>{value ? formattedValue : '-'}</ThemedText.BodyPrimary>\n    </EthContainer>\n  )\n}\n\nexport const VolumeCell = ({\n  value,\n  denomination,\n  usdPrice,\n}: {\n  value?: number\n  denomination: Denomination\n  usdPrice?: number\n}) => {\n  const denominatedValue = getDenominatedValue(denomination, false, value, usdPrice)\n\n  const formattedValue = denominatedValue\n    ? denomination === Denomination.ETH\n      ? ethNumberStandardFormatter(denominatedValue.toString(), false, false, true) + ' ETH'\n      : ethNumberStandardFormatter(denominatedValue, true, false, true)\n    : '-'\n\n  return (\n    <EthContainer>\n      <ThemedText.BodyPrimary>{value ? formattedValue : '-'}</ThemedText.BodyPrimary>\n    </EthContainer>\n  )\n}\n\nexport const ChangeCell = ({ change }: { change?: number }) => (\n  <ChangeCellContainer change={change ?? 0}>\n    {!change || change > 0 ? (\n      <SquareArrowUpIcon width=\"20px\" height=\"20px\" />\n    ) : (\n      <SquareArrowDownIcon width=\"20px\" height=\"20px\" />\n    )}\n    <ThemedText.BodyPrimary color=\"currentColor\">{change ? Math.abs(Math.round(change)) : 0}%</ThemedText.BodyPrimary>\n  </ChangeCellContainer>\n)\n\nexport const WeiWithDayChange = ({ value }: CellProps) => (\n  <Column gap=\"4\">\n    <Row justifyContent=\"flex-end\" color=\"textPrimary\">\n      {value && value.value ? <>{formatWeiToDecimal(value.value.toString(), true)} ETH</> : '-'}\n    </Row>\n    {value.change ? (\n      <Box\n        as=\"span\"\n        color={value.change > 0 ? 'green' : 'accentFailure'}\n        fontWeight=\"normal\"\n        fontSize=\"12\"\n        position=\"relative\"\n      >\n        {value.change > 0 && '+'}\n        {formatChange(value.change)}%\n      </Box>\n    ) : null}\n  </Column>\n)\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#H4sIAAAAAAAACo1UwW7bMAy95yuEFgUSoDLsJE0a5dTLrjvsAwbZoh3NjuRKcuJm2L+PUrzW8rohN5l8enyPFJ18z5bb5vkgKvJzRkiujQDDiNIK9rNfs+Q9zQ76BCaAis5YjaBWS+XATHBCWp43ICIo75yOcDKkWy6EVBUj2brtSfbc9jEoJtMtL6R7YyRNVhGujsmWyDWlqie6dONlnbiZU1qBkkBDyNKcF3VldKfEt86UvIDF3vflPUpvufq1c41U/upIgppY3nnLW6/T972nVl5C4joDiiGfcdA7yhtZKUYaKF1EqQOlM1zZUpsjI7bgDcyzZPkU124ZywEhMLjHuSnHyN2dL9FqK53UWIDnVjedAx+VygJC0tg+ikBj3NDKcCGRZL7LkvVGQPVI7teb7erLC0kf8LzbrDd4ztI0yVYPi4mr4WvoZTDQcoN0PknPkNfS0SO39d/17suyJClJF39a6Tkf/w3bTymx6jFYBkZ6bUJ+Goe+aDoBI6nWvTWYwP5IMQqfpXAHHGY7tuU1dJZhCw9gpLv2OOwKhROKs58s2Gs0oY+nPlYf+jSMakDgLiyfLAFug1h61JebYPYG1P8RVHdu4iD8Ij73kUVQO/qbjN/WdalMdd7AJfvhn/BvctI31KAEAAA=\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var logo = 'rgw6ez6m5';\nexport var title = 'rgw6ezcb rgw6ezan rgw6ez6zt rgw6ez49n rgw6ez41n rgw6ez6wp rgw6ez41b rgw6ez41h rgw6ez29t rgw6ez2eh';\nexport var openAddress = 'rgw6ez1kb rgw6ez16z rgw6ez10b';\nexport var address = 'rgw6ezcb rgw6ezan rgw6ez6zt rgw6ez49n rgw6ez41n rgw6ez6wp rgw6ez41b rgw6ez41h rgw6ez29t rgw6ez2eh rgw6ezjh rgw6ez35 rgw6ez1j5 rgw6ez14z';\nexport var verifiedBadge = 'rgw6ezj5 rgw6ez40t rgw6ez2k5 rgw6ez17h rgw6ez10t rgw6ez41n';","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#H4sIAAAAAAAACo1UwW7bMAy95yuEFgUSoDLsJE0a5dTLrjvsAwbZoh3NjuRKcuJm2L+PUrzW8rohN5l8enyPFJ18z5bb5vkgKvJzRkiujQDDiNIK9rNfs+Q9zQ76BCaAis5YjaBWS+XATHBCWp43ICIo75yOcDKkWy6EVBUj2brtSfbc9jEoJtMtL6R7YyRNVhGujsmWyDWlqie6dONlnbiZU1qBkkBDyNKcF3VldKfEt86UvIDF3vflPUpvufq1c41U/upIgppY3nnLW6/T972nVl5C4joDiiGfcdA7yhtZKUYaKF1EqQOlM1zZUpsjI7bgDcyzZPkU124ZywEhMLjHuSnHyN2dL9FqK53UWIDnVjedAx+VygJC0tg+ikBj3NDKcCGRZL7LkvVGQPVI7teb7erLC0kf8LzbrDd4ztI0yVYPi4mr4WvoZTDQcoN0PknPkNfS0SO39d/17suyJClJF39a6Tkf/w3bTymx6jFYBkZ6bUJ+Goe+aDoBI6nWvTWYwP5IMQqfpXAHHGY7tuU1dJZhCw9gpLv2OOwKhROKs58s2Gs0oY+nPlYf+jSMakDgLiyfLAFug1h61JebYPYG1P8RVHdu4iD8Ij73kUVQO/qbjN/WdalMdd7AJfvhn/BvctI31KAEAAA=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/explore/Explore.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/explore/Explore.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xbW9yN3ZlMSB7CiAgbWF4LXdpZHRoOiAxMjAwcHg7CiAgbWFyZ2luOiAwIGF1dG87CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogcm93OwogIGZsZXgtd3JhcDogbm93cmFwOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQouXzFtb3I3dmUzIHsKICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7CiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjsKfQouXzFtb3I3dmU1IHsKICBoZWlnaHQ6IDM4NnB4Owp9Ci5fMW1vcjd2ZTkgewogIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjRzIGVhc2U7Cn0KLl8xbW9yN3ZlZSB7CiAgdmVydGljYWwtYWxpZ246IGJvdHRvbTsKfQouXzFtb3I3dmVnIHsKICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOwogIGJveC1zaGFkb3c6IDAgMCAwIDFweCByZ2JhKDE1MywgMTYxLCAxODksIDAuMjQpOwogIGJvcmRlci1zcGFjaW5nOiAwcHggNDBweDsKfQouXzFtb3I3dmVqOm50aC1sYXN0LWNoaWxkKDEpIHsKICBwYWRkaW5nLXJpZ2h0OiAyMHB4Owp9Ci5fMW1vcjd2ZWw6bnRoLWxhc3QtY2hpbGQoMSkgewogIHBhZGRpbmctcmlnaHQ6IDIwcHg7Cn0KLl8xbW9yN3ZlbjpudGgtbGFzdC1jaGlsZCgxKSB7CiAgcGFkZGluZy1yaWdodDogMjBweDsKfQouXzFtb3I3dmVxIHsKICBtYXJnaW4tdG9wOiAtMXB4OwogIG1hcmdpbi1sZWZ0OiAtMXB4Owp9CkBtZWRpYSAobWluLXdpZHRoOiAxMDI0cHgpIHsKICAuXzFtb3I3dmU3IHsKICAgIHdpZHRoOiA0MCU7CiAgfQp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var section = '_1mor7ve1 rgw6ez2a5 rgw6ez28q rgw6ez2fn rgw6ez2e8';\nexport var bannerWrap = '_1mor7ve3 rgw6ez44n rgw6ez6wp rgw6ez1az';\nexport var bannerOverlay = '_1mor7ve5 rgw6ez44b rgw6ez46n rgw6ez14n rgw6ez5zb rgw6ez305 rgw6ez3b5';\nexport var collectionDetails = '_1mor7ve7 rgw6ez14n';\nexport var activityRow = '_1mor7ve9 rgw6ez44b rgw6ez2z rgw6ez37';\nexport var activeRow = 'rgw6ez5zh';\nexport var timestamp = 'rgw6ez44b rgw6ezab rgw6ez4f5 rgw6ez3az rgw6ez36v rgw6ez33t rgw6ez35j rgw6ez3db rgw6ez3gj';\nexport var marketplaceIcon = '_1mor7vee rgw6ezzz rgw6ez16n rgw6ez6lt rgw6ez3tn rgw6ezjh';\nexport var table = '_1mor7veg rgw6ez4ih rgw6ez14n rgw6ez6m5 rgw6ez6kt';\nexport var thead = 'rgw6ezpb rgw6ez4yz rgw6ez6ud rgw6ez6ld';\nexport var th = '_1mor7vej rgw6ezcb rgw6ezab rgw6ez6zl rgw6ez49t rgw6ez2kt rgw6ez24b';\nexport var td = '_1mor7vel rgw6ezcb rgw6ezan rgw6ez6zt rgw6ez2kh rgw6ez23z rgw6ez1gt rgw6ez41t rgw6ez44n';\nexport var loadingTd = '_1mor7ven rgw6ezcb rgw6ezan rgw6ez6zt rgw6ez2kh rgw6ez23z rgw6ez1gt rgw6ez41t rgw6ez44n';\nexport var trendingOptions = 'rgw6ezw5 rgw6ezez rgw6ez18b rgw6ez6m5 rgw6ez6ul rgw6ez6kx rgw6ez4yz';\nexport var trendingOption = '_1mor7veq rgw6ez2a5 rgw6ez2fn rgw6ez2kz rgw6ez24h rgw6ez6m5 rgw6ezab rgw6ez40t rgw6ez6kl';\nexport var trendingOptionActive = 'rgw6ez61b';","import clsx from 'clsx'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { useWindowSize } from 'hooks/useWindowSize'\nimport { useIsMobile } from 'nft/hooks'\nimport { useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Column, ColumnInstance, HeaderGroup, IdType, useSortBy, useTable } from 'react-table'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { Box } from '../../components/Box'\nimport { CollectionTableColumn } from '../../types'\nimport { ArrowRightIcon } from '../icons'\nimport { ColumnHeaders } from './CollectionTable'\nimport * as styles from './Explore.css'\n\nconst RankCellContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding-left: 24px;\n  gap: 12px;\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding-left: 8px;\n  }\n`\n\nconst StyledRow = styled.tr`\n  cursor: pointer;\n  :hover {\n    background: ${({ theme }) => theme.stateOverlayHover};\n  }\n  :active {\n    background: ${({ theme }) => theme.stateOverlayPressed};\n  }\n`\n\nconst StyledLoadingRow = styled.tr`\n  height: 80px;\n`\n\nconst StyledHeader = styled.th<{ isFirstHeader: boolean }>`\n  ${({ isFirstHeader }) => !isFirstHeader && `cursor: pointer;`}\n\n  :hover {\n    ${({ theme, isFirstHeader }) => !isFirstHeader && `opacity: ${theme.opacity.hover};`}\n  }\n\n  :active {\n    ${({ theme, isFirstHeader }) => !isFirstHeader && `opacity: ${theme.opacity.click};`}\n  }\n`\n\nconst StyledLoadingHolder = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: end;\n  align-items: center;\n`\n\nconst StyledCollectionNameHolder = styled.div`\n  display: flex;\n  margin-left: 24px;\n  gap: 8px;\n  align-items: center;\n`\n\nconst StyledImageHolder = styled(LoadingBubble)`\n  width: 36px;\n  height: 36px;\n  border-radius: 36px;\n`\n\nconst StyledRankHolder = styled(LoadingBubble)`\n  width: 8px;\n  height: 16px;\n  margin-right: 12px;\n`\n\nconst DEFAULT_TRENDING_TABLE_QUERY_AMOUNT = 10\n\ninterface TableProps<D extends Record<string, unknown>> {\n  columns: Column<CollectionTableColumn>[]\n  data: CollectionTableColumn[]\n  smallHiddenColumns: IdType<D>[]\n  mediumHiddenColumns: IdType<D>[]\n  largeHiddenColumns: IdType<D>[]\n  classNames?: {\n    td: string\n  }\n}\nexport function Table<D extends Record<string, unknown>>({\n  columns,\n  data,\n  smallHiddenColumns,\n  mediumHiddenColumns,\n  largeHiddenColumns,\n  classNames,\n  ...props\n}: TableProps<D>) {\n  const theme = useTheme()\n  const { width } = useWindowSize()\n  const isMobile = useIsMobile()\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, setHiddenColumns, visibleColumns } =\n    useTable(\n      {\n        columns,\n        data,\n        initialState: {\n          sortBy: [\n            {\n              desc: true,\n              id: ColumnHeaders.Volume,\n            },\n          ],\n        },\n        ...props,\n      },\n      useSortBy\n    )\n\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if (!width) return\n\n    if (width < theme.breakpoint.sm) {\n      setHiddenColumns(smallHiddenColumns)\n    } else if (width < theme.breakpoint.md) {\n      setHiddenColumns(mediumHiddenColumns)\n    } else if (width < theme.breakpoint.lg) {\n      setHiddenColumns(largeHiddenColumns)\n    } else {\n      setHiddenColumns([])\n    }\n  }, [width, setHiddenColumns, columns, smallHiddenColumns, mediumHiddenColumns, largeHiddenColumns, theme.breakpoint])\n\n  if (data.length === 0) {\n    return <LoadingTable headerGroups={headerGroups} visibleColumns={visibleColumns} {...getTableProps()} />\n  }\n\n  return (\n    <table {...getTableProps()} className={styles.table}>\n      <thead className={styles.thead}>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\n            {headerGroup.headers.map((column, index) => {\n              return (\n                <StyledHeader\n                  className={styles.th}\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  style={{\n                    textAlign: index === 0 ? 'left' : 'right',\n                    paddingLeft: index === 0 ? (isMobile ? '16px' : '52px') : 0,\n                  }}\n                  isFirstHeader={index === 0}\n                  key={index}\n                >\n                  <Box as=\"span\" color=\"accentAction\" position=\"relative\">\n                    {column.isSorted ? (\n                      column.isSortedDesc ? (\n                        <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\n                      ) : (\n                        <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\n                      )\n                    ) : (\n                      ''\n                    )}\n                  </Box>\n                  <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\n                    {column.render('Header')}\n                  </Box>\n                </StyledHeader>\n              )\n            })}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row)\n\n          return (\n            <StyledRow\n              {...row.getRowProps()}\n              key={row.id}\n              onClick={() => navigate(`/nfts/collection/${row.original.collection.address}`)}\n            >\n              {row.cells.map((cell, cellIndex) => {\n                return (\n                  <td className={clsx(styles.td, classNames?.td)} {...cell.getCellProps()} key={cellIndex}>\n                    {cellIndex === 0 ? (\n                      <RankCellContainer>\n                        {!isMobile && (\n                          <ThemedText.BodySecondary fontSize=\"14px\" lineHeight=\"20px\">\n                            {i + 1}\n                          </ThemedText.BodySecondary>\n                        )}\n                        {cell.render('Cell')}\n                      </RankCellContainer>\n                    ) : (\n                      cell.render('Cell')\n                    )}\n                  </td>\n                )\n              })}\n            </StyledRow>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\ninterface LoadingTableProps {\n  headerGroups: HeaderGroup<CollectionTableColumn>[]\n  visibleColumns: ColumnInstance<CollectionTableColumn>[]\n}\n\nfunction LoadingTable({ headerGroups, visibleColumns, ...props }: LoadingTableProps) {\n  return (\n    <table {...props} className={styles.table}>\n      <thead className={styles.thead}>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\n            {headerGroup.headers.map((column, index) => {\n              return (\n                <StyledHeader\n                  className={styles.th}\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  style={{\n                    textAlign: index === 0 ? 'left' : 'right',\n                    paddingLeft: index === 0 ? '52px' : 0,\n                  }}\n                  isFirstHeader={index === 0}\n                  key={index}\n                >\n                  <Box as=\"span\" color=\"accentAction\" position=\"relative\">\n                    {column.isSorted ? (\n                      column.isSortedDesc ? (\n                        <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\n                      ) : (\n                        <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\n                      )\n                    ) : (\n                      ''\n                    )}\n                  </Box>\n                  <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\n                    {column.render('Header')}\n                  </Box>\n                </StyledHeader>\n              )\n            })}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...props}>\n        {[...Array(DEFAULT_TRENDING_TABLE_QUERY_AMOUNT)].map((_, index) => (\n          <StyledLoadingRow key={index}>\n            {[...Array(visibleColumns.length)].map((_, cellIndex) => {\n              return (\n                <td className={styles.loadingTd} key={cellIndex}>\n                  {cellIndex === 0 ? (\n                    <StyledCollectionNameHolder>\n                      <StyledRankHolder />\n                      <StyledImageHolder />\n                      <LoadingBubble />\n                    </StyledCollectionNameHolder>\n                  ) : (\n                    <StyledLoadingHolder>\n                      <LoadingBubble />\n                    </StyledLoadingHolder>\n                  )}\n                </td>\n              )\n            })}\n          </StyledLoadingRow>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n","import ms from 'ms.macro'\nimport { CollectionTableColumn, Denomination, TimePeriod, VolumeType } from 'nft/types'\nimport { fetchPrice } from 'nft/utils'\nimport { useMemo, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { fetchTrendingCollections } from '../../queries'\nimport CollectionTable from './CollectionTable'\n\nconst timeOptions: { label: string; value: TimePeriod }[] = [\n  { label: '1D', value: TimePeriod.OneDay },\n  { label: '1W', value: TimePeriod.SevenDays },\n  { label: '1M', value: TimePeriod.ThirtyDays },\n  { label: 'All', value: TimePeriod.AllTime },\n]\n\nconst ExploreContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 1200px;\n`\n\nconst StyledHeader = styled.div`\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 36px;\n  line-height: 44px;\n  weight: 500;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    font-size: 20px;\n    line-height: 28px;\n  }\n`\n\nconst FiltersRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 36px;\n  margin-bottom: 20px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    margin-bottom: 16px;\n    margin-top: 16px;\n  }\n`\n\nconst Filter = styled.div`\n  display: flex;\n  outline: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n  padding: 4px;\n`\n\nconst Selector = styled.div<{ active: boolean }>`\n  padding: 8px 12px;\n  border-radius: 12px;\n  background: ${({ active, theme }) => (active ? theme.backgroundInteractive : 'none')};\n  cursor: pointer;\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n\n  :active {\n    opacity: ${({ theme }) => theme.opacity.click};\n  }\n`\n\nconst StyledSelectorText = styled(ThemedText.SubHeader)<{ active: boolean }>`\n  color: ${({ theme, active }) => (active ? theme.textPrimary : theme.textSecondary)};\n`\n\nconst TrendingCollections = () => {\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>(TimePeriod.OneDay)\n  const [isEthToggled, setEthToggled] = useState(true)\n\n  const { isSuccess, data } = useQuery(\n    ['trendingCollections', timePeriod],\n    () => {\n      return fetchTrendingCollections({ volumeType: 'eth', timePeriod, size: 100 })\n    },\n    {\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      refetchInterval: 5000,\n    }\n  )\n\n  const { data: usdPrice } = useQuery(['fetchPrice', {}], () => fetchPrice(), {\n    refetchOnReconnect: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchInterval: ms`1m`,\n  })\n\n  const trendingCollections = useMemo(() => {\n    if (isSuccess && data) {\n      return data.map((d) => ({\n        ...d,\n        collection: {\n          name: d.name,\n          logo: d.imageUrl,\n          address: d.address,\n          isVerified: d.isVerified,\n        },\n        volume: {\n          value: d.volume,\n          change: d.volumeChange,\n          type: 'eth' as VolumeType,\n        },\n        floor: {\n          value: d.floor,\n          change: d.floorChange,\n        },\n        owners: {\n          value: d.owners,\n          change: d.ownersChange,\n        },\n        sales: d.sales,\n        totalSupply: d.totalSupply,\n        denomination: isEthToggled ? Denomination.ETH : Denomination.USD,\n        usdPrice,\n      }))\n    } else return [] as CollectionTableColumn[]\n  }, [data, isSuccess, isEthToggled, usdPrice])\n\n  return (\n    <ExploreContainer>\n      <StyledHeader>Trending NFT collections</StyledHeader>\n      <FiltersRow>\n        <Filter>\n          {timeOptions.map((timeOption) => {\n            return (\n              <Selector\n                key={timeOption.value}\n                active={timeOption.value === timePeriod}\n                onClick={() => setTimePeriod(timeOption.value)}\n              >\n                <StyledSelectorText lineHeight=\"20px\" active={timeOption.value === timePeriod}>\n                  {timeOption.label}\n                </StyledSelectorText>\n              </Selector>\n            )\n          })}\n        </Filter>\n        <Filter onClick={() => setEthToggled(!isEthToggled)}>\n          <Selector active={isEthToggled}>\n            <StyledSelectorText lineHeight=\"20px\" active={isEthToggled}>\n              ETH\n            </StyledSelectorText>\n          </Selector>\n          <Selector active={!isEthToggled}>\n            <StyledSelectorText lineHeight=\"20px\" active={!isEthToggled}>\n              USD\n            </StyledSelectorText>\n          </Selector>\n        </Filter>\n      </FiltersRow>\n      <CollectionTable data={trendingCollections} />\n    </ExploreContainer>\n  )\n}\n\nexport default TrendingCollections\n","import { PageName } from 'analytics/constants'\nimport { Trace } from 'analytics/Trace'\nimport Banner from 'nft/components/explore/Banner'\nimport TrendingCollections from 'nft/components/explore/TrendingCollections'\nimport styled from 'styled-components/macro'\n\nconst ExploreContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  padding: 16px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    gap: 16px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    gap: 0px;\n  }\n`\n\nconst NftExplore = () => {\n  return (\n    <>\n      <Trace page={PageName.NFT_EXPLORE_PAGE} shouldLogImpression>\n        <ExploreContainer>\n          <Banner />\n          <TrendingCollections />\n        </ExploreContainer>\n      </Trace>\n    </>\n  )\n}\n\nexport default NftExplore\n"],"sourceRoot":""}