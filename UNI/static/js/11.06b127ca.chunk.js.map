{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","../../node_modules/throttle-debounce/dist/index.esm.js","nft/components/collection/Activity.css.ts","nft/components/common/Loading/LoadingSparkle.css.ts","nft/components/common/Loading/LoadingSparkle.tsx","nft/components/collection/ActivityCells.tsx","nft/utils/date.ts","nft/components/collection/Activity.tsx","nft/components/collection/ActivityLoader.tsx","nft/components/collection/ActivityLoader.css.ts","graphql/data/nft/__generated__/DetailsQuery.graphql.ts","graphql/data/nft/Details.ts","../node_modules/react-feather/dist/icons/upload.js","nft/components/details/AssetDetails.tsx","nft/components/details/AssetPriceDetails.tsx","nft/components/details/AssetActivity.tsx","nft/components/details/AssetDetails.css.ts","nft/components/details/DetailsContainer.tsx","nft/components/details/InfoContainer.tsx","nft/components/details/TraitsContainer.tsx","nft/pages/asset/Asset.tsx"],"names":["d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","assign","t","s","i","n","arguments","length","prototype","call","apply","this","delay","noTrailing","callback","debounceMode","timeoutID","cancelled","lastExec","clearExistingTimeout","clearTimeout","wrapper","self","elapsed","Date","now","args","exec","clear","undefined","setTimeout","cancel","__","constructor","create","eventRow","headerRow","detailsImage","detailsName","eventDetail","eventTime","addressCell","buyCell","removeCell","filter","activeFilter","marketplaceIcon","rarityInfo","path","LoadingSparkle","width","height","viewBox","fill","xmlns","themeVars","colors","textSecondary","className","styles","AddressLink","styled","ExternalLink","theme","textPrimary","opacity","hover","click","formatListingStatus","status","OrderStatus","EXECUTED","CANCELLED","EXPIRED","VALID","BuyCell","event","collectionName","selectAsset","removeAsset","itemsInBag","cartExpanded","toggleCart","isMobile","ethPriceInUSD","asset","useMemo","buildActivityAsset","isSelected","some","item","tokenId","address","trace","useTrace","page","PageName","NFT_COLLECTION_PAGE","eventProperties","collection_address","token_id","token_type","tokenType","display","sm","lg","justifyContent","marginX","eventType","ActivityEventType","Listing","orderStatus","as","onClick","e","preventDefault","sendAnalyticsEvent","EventName","NFT_BUY_ADDED","disabled","AddressCell","desktopLBreakpoint","chainId","xl","xxl","href","getExplorerLink","ChainId","MAINNET","ExplorerDataType","ADDRESS","style","textDecoration","stopPropagation","shortenAddress","MarketplaceIcon","marketplace","alt","src","PriceTooltip","price","text","textAlign","fontSize","fontWeight","color","placement","substring","PriceCell","formattedPrice","putCommas","formatEthPrice","toString","md","gap","renderEventIcon","Sale","Transfer","CancelListing","ExternalLinkIcon","transactionHash","window","open","openEtherscanLinkInNewTab","marginLeft","eventColors","EventCell","eventTimestamp","eventTransactionHash","eventOnly","ActivityEventTypeDisplay","isValidDate","getTimeDifference","NoContentContainer","position","background","left","top","transform","Ranking","details","rarity","rarityVerified","rarityProviderLogo","getRarityProviderLogo","source","marginRight","fallbackProvider","paddingTop","paddingBottom","rank","getItemImage","tokenMetadata","smallImageUrl","imageUrl","ItemCell","useState","loaded","setLoaded","noContent","setNoContent","overflow","whiteSpace","name","draggable","onLoad","onError","date","parse","isNaN","getTime","diff","days","Math","floor","hours","minutes","ColumnHeaders","LoadingSquare","Box","LoadingSliver","ActivityLoader","marginTop","map","_","HeaderRow","Item","Event","Price","By","To","initialFilterState","reduceFilters","state","action","baseHref","collectionAddress","Activity","contractAddress","useReducer","activeFilters","filtersDispatch","useInfiniteQuery","a","pageParam","ActivityFetcher","eventTypes","keys","key","getNextPageParam","lastPage","events","cursor","refetchInterval","refetchIntervalInBackground","refetchOnWindowFocus","refetchOnMount","eventsData","data","fetchNextPage","hasNextPage","isFetchingNextPage","isSuccess","isLoading","pages","flat","useBag","addAssetsToBag","removeAssetsFromBag","bagExpanded","toggleBag","useIsMobile","setEthPriceInUSD","useEffect","fetchPrice","then","Filter","useCallback","isActive","clsx","charAt","slice","toLowerCase","next","hasMore","loader","paddingY","dataLength","fromAddress","toAddress","node","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","v10","v11","v12","v13","v14","v15","v16","v17","v18","v19","v20","v21","v22","v23","v24","v25","v26","v27","v28","v29","v30","v31","v32","v33","v34","v35","v36","v37","hash","detailsQuery","_extends","target","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Upload","forwardRef","_ref","ref","_ref$color","_ref$size","size","rest","React","createElement","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","x1","y1","x2","y2","propTypes","PropTypes","string","oneOfType","number","displayName","MediaType","hoverState","css","stateOverlayHover","stateOverlayPressed","Container","div","BestPriceContainer","backgroundSurface","backgroundOutline","PriceRow","img","BuyNowButton","assetInBag","useAccentColor","accentFailure","accentAction","backgroundInteractive","margin","BuyNowButtonContainer","Erc1155BuyNowButton","Tertiary","ThemedText","BodySecondary","textTertiary","Erc1155BuyNowText","Erc1155ChangeButton","remove","accentFailureSoft","accentActionSoft","UploadLink","transition","duration","timing","medium","ease","NotForSaleContainer","DiscoveryContainer","OwnerText","OwnerInformationContainer","OwnerContainer","listing","sellorders","cheapestOrder","expirationDate","orderClosingDate","endAt","USDPrice","useUsdPrice","navigate","useNavigate","SubHeader","lineHeight","getMarketplaceIcon","MediumHeader","priceInfo","ETHPrice","ethNumberStandardFormatter","timeLeft","NotForSale","collection","useTheme","Link","AssetPriceDetails","account","useWeb3React","isErc1555","TokenType","ERC1155","useCopyClipboard","setCopied","quantity","x","isOwner","owner","rel","location","TR","tr","TH","th","Table","table","TD","td","PriceContainer","ActivityContainer","AssetActivity","id","index","Details","Header","Body","Center","span","CreatorLink","CopyIcon","Copy","GridItem","header","body","DetailsContainer","creator","totalSupply","copy","isOpen","PrimaryHeader","SecondaryHeader","SecondaryHeaderContainer","ContentContainer","InfoContainer","children","primaryHeader","secondaryHeader","defaultOpen","setIsOpen","Grid","GridItemContainer","TraitType","TraitValue","trait","trait_type","trait_value","params","qs","stringify","traits","arrayFormat","to","TraitsContainer","sort","localeCompare","OpacityTransition","CollectionHeader","AssetPriceDetailsContainer","AssetHeader","MediaContainer","Column","AddressTextLink","SocialsContainer","DescriptionText","RarityWrap","EmptyActivitiesContainer","RouterLink","DefaultLink","ActivitySelectContainer","ContentNotAvailable","FilterBox","accentActive","ByText","Img","HoverImageContainer","HoverContainer","ContainerText","AudioPlayer","animationUrl","dominantColor","alignSelf","controls","join","AssetView","mediaType","autoPlay","muted","loop","AssetDetails","collectionStats","rarityProvider","providers","find","provider","primaryProvider","assetMediaType","isAudio","Audio","isVideo","Video","Image","useQuery","priceData","lastSalePrice","formattedEthprice","showHolder","setShowHolder","isVerified","score","scrollableTarget","collectionDescription","externalUrl","Resource","link","twitterUrl","discordUrl","AssetContainer","Asset","useParams","isNftGraphQl","useNftGraphQlFlag","NftGraphQlVariant","Enabled","fetchSingleAsset","refetchOnReconnect","gqlData","useLazyLoadQuery","nftAssets","edges","ethPrice","parseEther","listings","value","notForSale","collectionSymbol","image","url","baseAsset","baseDecimals","basePrice","susFlag","suspiciousFlag","listingNode","protocolParameters","JSON","smallImage","nftContracts","standard","collectionIsVerified","rarities","ownerAddress","profile_img_url","profileImage","metadataUrl","description","collectionImageUrl","numAssets","useDetailsQuery","CollectionStatsFetcher","Trace","NFT_DETAILS_PAGE","properties","shouldLogImpression"],"mappings":"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","file":"static/js/11.06b127ca.chunk.js","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}   [noTrailing]   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\n *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\n *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\n *                                    the internal counter is reset)\n * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                    to `callback` when the throttled-function is executed.\n * @param  {Boolean}   [debounceMode] If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\n *                                    schedule `callback` to execute after `delay` ms.\n *\n * @return {Function}  A new, throttled, function.\n */\nfunction throttle (delay, noTrailing, callback, debounceMode) {\n  /*\n   * After wrapper has stopped being called, this timeout ensures that\n   * `callback` is executed at the proper times in `throttle` and `end`\n   * debounce modes.\n   */\n  var timeoutID;\n  var cancelled = false; // Keep track of the last time `callback` was executed.\n\n  var lastExec = 0; // Function to clear existing timeout\n\n  function clearExistingTimeout() {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n  } // Function to cancel next exec\n\n\n  function cancel() {\n    clearExistingTimeout();\n    cancelled = true;\n  } // `noTrailing` defaults to falsy.\n\n\n  if (typeof noTrailing !== 'boolean') {\n    debounceMode = callback;\n    callback = noTrailing;\n    noTrailing = undefined;\n  }\n  /*\n   * The `wrapper` function encapsulates all of the throttling / debouncing\n   * functionality and when executed will limit the rate at which `callback`\n   * is executed.\n   */\n\n\n  function wrapper() {\n    var self = this;\n    var elapsed = Date.now() - lastExec;\n    var args = arguments;\n\n    if (cancelled) {\n      return;\n    } // Execute `callback` and update the `lastExec` timestamp.\n\n\n    function exec() {\n      lastExec = Date.now();\n      callback.apply(self, args);\n    }\n    /*\n     * If `debounceMode` is true (at begin) this is used to clear the flag\n     * to allow future `callback` executions.\n     */\n\n\n    function clear() {\n      timeoutID = undefined;\n    }\n\n    if (debounceMode && !timeoutID) {\n      /*\n       * Since `wrapper` is being called for the first time and\n       * `debounceMode` is true (at begin), execute `callback`.\n       */\n      exec();\n    }\n\n    clearExistingTimeout();\n\n    if (debounceMode === undefined && elapsed > delay) {\n      /*\n       * In throttle mode, if `delay` time has been exceeded, execute\n       * `callback`.\n       */\n      exec();\n    } else if (noTrailing !== true) {\n      /*\n       * In trailing throttle mode, since `delay` time has not been\n       * exceeded, schedule `callback` to execute `delay` ms after most\n       * recent execution.\n       *\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\n       * after `delay` ms.\n       *\n       * If `debounceMode` is false (at end), schedule `callback` to\n       * execute after `delay` ms.\n       */\n      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n    }\n  }\n\n  wrapper.cancel = cancel; // Return the wrapper function.\n\n  return wrapper;\n}\n\n/* eslint-disable no-undefined */\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param  {Number}   delay         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}  [atBegin]     Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n * @param  {Function} callback      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                  to `callback` when the debounced-function is executed.\n *\n * @return {Function} A new, debounced function.\n */\n\nfunction debounce (delay, atBegin, callback) {\n  return callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);\n}\n\nexport { throttle, debounce };\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#H4sIAAAAAAAACo1UwW7bMAy95yuEFgUSoDLsJE0a5dTLrjvsAwbZoh3NjuRKcuJm2L+PUrzW8rohN5l8enyPFJ18z5bb5vkgKvJzRkiujQDDiNIK9rNfs+Q9zQ76BCaAis5YjaBWS+XATHBCWp43ICIo75yOcDKkWy6EVBUj2brtSfbc9jEoJtMtL6R7YyRNVhGujsmWyDWlqie6dONlnbiZU1qBkkBDyNKcF3VldKfEt86UvIDF3vflPUpvufq1c41U/upIgppY3nnLW6/T972nVl5C4joDiiGfcdA7yhtZKUYaKF1EqQOlM1zZUpsjI7bgDcyzZPkU124ZywEhMLjHuSnHyN2dL9FqK53UWIDnVjedAx+VygJC0tg+ikBj3NDKcCGRZL7LkvVGQPVI7teb7erLC0kf8LzbrDd4ztI0yVYPi4mr4WvoZTDQcoN0PknPkNfS0SO39d/17suyJClJF39a6Tkf/w3bTymx6jFYBkZ6bUJ+Goe+aDoBI6nWvTWYwP5IMQqfpXAHHGY7tuU1dJZhCw9gpLv2OOwKhROKs58s2Gs0oY+nPlYf+jSMakDgLiyfLAFug1h61JebYPYG1P8RVHdu4iD8Ij73kUVQO/qbjN/WdalMdd7AJfvhn/BvctI31KAEAAA=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/collection/Activity.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/collection/Activity.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#H4sIAAAAAAAACr2Ty26DMBBF9/kKL5OFEVBCIrLpP7RS1449AbfGRoNJaKr8e41pFFBeTRfdIGTfuWc8jwBiEWIaka8JITlKQS2UlWIWKDeqKXWdkTiYb5BEG1xNDpOgD3jyAQXIvLAZWSZVO7zMCrMF9JI14x85mkaLjGwZTinNQUvvbrCmp+uXBjeMw2zgM/cOSmqgR1KUjkjsXBGPc+EXFOFIAXc98rseRQaarRUIr+QN1gYzUhmpLbiyuaPuuccKYL5LYb+bjQyErAcOQ/moYBZa+wpoJcPPsYGv+cV8zntwyuAWC9pKSS7tWyHtqDHvNxvcm4d/NVe9rWlpLfdS55n7RwFI3dFAVl8YjrhrijsE68pO64pxHx8GYQLl6idZgaaiG6mcxFmrBqdupnwCzyUIyUjNEUATpgWZllLTnRS2yEiauJ7PPDUYbs31vem25rQ7hBzuMhbp8jFGFCw8IEj8N+phvwdGYTfr/0qMlw/W8TpxQP0GlaR4z8kEAAA=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var baseRow = 'e2d0r61 rgw6ez40z';\nexport var eventRow = 'e2d0r63 e2d0r61 rgw6ez40z rgw6ez295 rgw6ez2a6 rgw6ez2en rgw6ez2fo rgw6ez2kt rgw6ez24b rgw6ez49n rgw6ez6kl rgw6ez6ud rgw6ez6kx rgw6ez4ut rgw6ez5at';\nexport var headerRow = 'e2d0r65 e2d0r61 rgw6ez40z rgw6ez2a5 rgw6ez2fn rgw6ez23z rgw6ez49t rgw6ezab rgw6ezcn';\nexport var detailsImage = 'rgw6ez12h rgw6ez195 rgw6ez6lx';\nexport var detailsName = 'rgw6ezcb rgw6ezan rgw6ez6zt rgw6ezdt rgw6ez6wp rgw6ez41b rgw6ez41h';\nexport var eventDetail = 'e2d0r6a rgw6ezch rgw6ezan rgw6ez6zt rgw6ez3oz';\nexport var eventTime = 'e2d0r6c rgw6ezcb rgw6ezah rgw6ez6zp rgw6ez49t';\nexport var addressCell = 'e2d0r6e rgw6ezcn rgw6ezan rgw6ez6zp rgw6ez49n rgw6ez1bb rgw6ez43b rgw6ez28z';\nexport var baseBuyCell = 'e2d0r6g rgw6ezcn rgw6ezan rgw6ez6zp rgw6ez2a5 rgw6ez2fn rgw6ez2kt rgw6ez24b rgw6ez14z rgw6ez4lh rgw6ez6tl rgw6ez6m5 rgw6ez70h';\nexport var buyCell = 'e2d0r6h e2d0r6g rgw6ezcn rgw6ezan rgw6ez6zp rgw6ez2a5 rgw6ez2fn rgw6ez2kt rgw6ez24b rgw6ez14z rgw6ez4lh rgw6ez6tl rgw6ez6m5 rgw6ez70h';\nexport var removeCell = 'e2d0r6j e2d0r6g rgw6ezcn rgw6ezan rgw6ez6zp rgw6ez2a5 rgw6ez2fn rgw6ez2kt rgw6ez24b rgw6ez14z rgw6ez4lh rgw6ez6tl rgw6ez6m5 rgw6ez70h rgw6ez46z rgw6ez6kl';\nexport var filter = 'e2d0r6l rgw6ezch rgw6ezah rgw6ez6zh rgw6ez2a5 rgw6ez2fn rgw6ez2kt rgw6ez24b rgw6ez4hz rgw6ez49n rgw6ez6m5 rgw6ez6kl';\nexport var activeFilter = 'e2d0r6l rgw6ezch rgw6ezah rgw6ez6zh rgw6ez2a5 rgw6ez2fn rgw6ez2kt rgw6ez24b rgw6ez4hz rgw6ez49n rgw6ez6m5 rgw6ez6kl rgw6ez6ud rgw6ez6kx rgw6ez4t5';\nexport var marketplaceIcon = 'rgw6ezzz rgw6ez16n rgw6ez6lt rgw6ez3tn';\nexport var ensNameContainer = 'rgw6ez14z';\nexport var rarityInfo = 'e2d0r6s rgw6ez295 rgw6ez2en rgw6ez40h rgw6ez6lt rgw6ez16n rgw6ez14t rgw6ez49n rgw6ez4hz rgw6eza5 rgw6ezcn rgw6ez6kl';","import \"src/nft/components/common/Loading/LoadingSparkle.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/common/Loading/LoadingSparkle.css.ts.vanilla.css\\\",\\\"source\\\":\\\"QGtleWZyYW1lcyBfMWNmOWdudzAgewogIDAlIHsKICAgIG9wYWNpdHk6IDAuMjsKICB9CiAgMTAwJSB7CiAgICBvcGFjaXR5OiAxOwogIH0KfQouXzFjZjlnbncxOm50aC1jaGlsZCgxKSB7CiAgYW5pbWF0aW9uOiAwLjVzIGluZmluaXRlIF8xY2Y5Z253MDsKICBhbmltYXRpb24tZGlyZWN0aW9uOiBhbHRlcm5hdGU7CiAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyOwp9Ci5fMWNmOWdudzE6bnRoLWNoaWxkKDIpIHsKICBhbmltYXRpb246IDAuNXMgaW5maW5pdGUgXzFjZjlnbncwOwogIGFuaW1hdGlvbi1kZWxheTogMC4xczsKICBhbmltYXRpb24tZGlyZWN0aW9uOiBhbHRlcm5hdGU7CiAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyOwp9Ci5fMWNmOWdudzE6bnRoLWNoaWxkKDMpIHsKICBhbmltYXRpb246IDAuNXMgaW5maW5pdGUgXzFjZjlnbncwOwogIGFuaW1hdGlvbi1kZWxheTogMC4yczsKICBhbmltYXRpb24tZGlyZWN0aW9uOiBhbHRlcm5hdGU7CiAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyOwp9\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var path = '_1cf9gnw1';","import { themeVars } from 'nft/css/sprinkles.css'\n\nimport * as styles from './LoadingSparkle.css'\n\nexport const LoadingSparkle = () => {\n  return (\n    <svg width=\"40\" height=\"41\" viewBox=\"0 0 40 41\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M17.8281 10.834C17.6159 9.88757 17.4333 9.13689 17.291 8.58997C17.1751 8.11971 16.9497 7.68339 16.6331 7.31649C16.2834 6.97574 15.8515 6.731 15.3791 6.60601C14.8206 6.43175 14.0365 6.24408 13.0457 6.04301C12.7771 5.98134 12.6321 5.83926 12.6321 5.61405C12.6286 5.56049 12.6369 5.50679 12.6564 5.45676C12.6758 5.40674 12.7061 5.36159 12.7449 5.32448C12.8303 5.25054 12.9343 5.20142 13.0457 5.18241C13.8337 5.03623 14.6127 4.84557 15.3791 4.61136C15.8508 4.48054 16.282 4.23345 16.6331 3.89283C16.9497 3.52593 17.1751 3.08961 17.291 2.61935C17.4468 2.06885 17.6258 1.32623 17.8281 0.39145C17.8791 0.123349 18.016 0 18.2416 0C18.4671 0 18.6095 0.131392 18.6739 0.39145C18.8726 1.32623 19.0516 2.06885 19.211 2.61935C19.3304 3.08988 19.5585 3.52599 19.8769 3.89283C20.229 4.23347 20.6611 4.48052 21.1336 4.61136C21.8997 4.84657 22.6788 5.03724 23.467 5.18241C23.576 5.18865 23.6782 5.23739 23.7515 5.31813C23.8249 5.39887 23.8635 5.50515 23.8591 5.61405C23.8591 5.83926 23.7275 5.98134 23.467 6.04301C22.6802 6.19136 21.9014 6.37926 21.1336 6.60601C20.6605 6.73103 20.2276 6.97574 19.8769 7.31649C19.5585 7.68333 19.3304 8.11943 19.211 8.58997C19.0472 9.12617 18.8672 9.88757 18.6739 10.834C18.6095 11.1021 18.4671 11.2281 18.2416 11.2281C18.016 11.2281 17.8737 11.0967 17.8281 10.834Z\"\n        fill={themeVars.colors.textSecondary}\n        className={styles.path}\n      />\n      <path\n        d=\"M32.4448 19.8364C32.2192 18.6679 32.0079 17.7366 31.8166 17.0452C31.6743 16.4509 31.3902 15.8999 30.9885 15.4396C30.5445 15.0113 29.9992 14.7027 29.4037 14.5425C28.4447 14.2629 27.4703 14.0397 26.4853 13.874C26.1398 13.8226 25.9656 13.6426 25.9656 13.3369C25.9618 13.2674 25.9723 13.1978 25.9964 13.1324C26.0204 13.0671 26.0576 13.0074 26.1055 12.9569C26.2105 12.8597 26.3433 12.7977 26.4853 12.7798C27.4694 12.6134 28.4437 12.3931 29.4037 12.1198C30.0021 11.9667 30.549 11.6571 30.9885 11.2228C31.389 10.7583 31.6729 10.2049 31.8166 9.60859C32.0079 8.91721 32.2192 7.98584 32.4448 6.81449C32.4458 6.74608 32.4607 6.67858 32.4886 6.61609C32.5164 6.5536 32.5567 6.49743 32.6068 6.45096C32.657 6.40448 32.7161 6.3687 32.7806 6.34574C32.845 6.32278 32.9134 6.31313 32.9816 6.31739C33.2672 6.31739 33.4528 6.48309 33.5213 6.81449C33.7479 7.98584 33.9573 8.91721 34.1495 9.60859C34.2907 10.2036 34.5706 10.7567 34.9662 11.2228C35.404 11.6593 35.9516 11.9693 36.551 12.1198C37.515 12.3926 38.493 12.6129 39.4808 12.7798C39.5532 12.7803 39.6248 12.7958 39.6909 12.8254C39.757 12.855 39.8162 12.8981 39.8648 12.9518C39.9134 13.0055 39.9503 13.0687 39.9732 13.1375C39.9961 13.2063 40.0044 13.279 39.9977 13.3512C39.9977 13.6569 39.8263 13.8369 39.4808 13.8883C38.4922 14.0545 37.514 14.2778 36.551 14.5568C35.9543 14.7142 35.4084 15.0232 34.9662 15.4539C34.5695 15.916 34.2894 16.4666 34.1495 17.0595C33.9592 17.7509 33.7498 18.6813 33.5213 19.8507C33.4528 20.185 33.2758 20.3507 32.9816 20.3507C32.912 20.3546 32.8424 20.3442 32.777 20.32C32.7116 20.2958 32.6519 20.2585 32.6015 20.2103C32.5512 20.1621 32.5113 20.104 32.4843 20.0396C32.4573 19.9753 32.4439 19.9062 32.4448 19.8364Z\"\n        fill={themeVars.colors.textSecondary}\n        className={styles.path}\n      />\n      <path\n        d=\"M12.6196 40.6995C12.5109 40.7023 12.4027 40.6829 12.3013 40.6422C12.2 40.6016 12.1075 40.5405 12.0294 40.4627C11.8673 40.3009 11.7574 40.0919 11.7145 39.8639C11.418 38.0492 11.1251 36.5322 10.8358 35.3128C10.6133 34.2663 10.2461 33.258 9.74531 32.3187C9.32818 31.5649 8.73049 30.9334 8.00907 30.4841C7.132 29.9745 6.18128 29.6124 5.19297 29.4117C4.03371 29.1449 2.58684 28.8918 0.852359 28.6523C0.616735 28.6254 0.397657 28.5147 0.23303 28.3393C0.0804808 28.1721 -0.00302245 27.9506 0.000117795 27.7214C-0.00358202 27.4921 0.0799998 27.2703 0.23303 27.1035C0.396979 26.9271 0.616416 26.8162 0.852359 26.7905C2.5886 26.5618 4.03812 26.3114 5.20091 26.0392C6.20136 25.8286 7.16449 25.4614 8.05671 24.9505C8.7902 24.5064 9.40286 23.8792 9.83794 23.1268C10.3473 22.1993 10.7151 21.1968 10.9284 20.1545C11.2054 18.9369 11.4701 17.4162 11.7224 15.5925C11.7547 15.3608 11.8619 15.147 12.0268 14.9855C12.1058 14.9052 12.1997 14.8418 12.3028 14.7993C12.406 14.7567 12.5164 14.7359 12.6276 14.7378C12.7392 14.7338 12.8506 14.7526 12.9551 14.7933C13.0596 14.834 13.1552 14.8956 13.2363 14.9747C13.398 15.1367 13.5079 15.3456 13.5513 15.5735C13.8583 17.3972 14.1565 18.9178 14.4459 20.1354C14.6712 21.1811 15.0382 22.189 15.5363 23.1295C15.9558 23.8807 16.5531 24.5108 17.2726 24.9614C18.1474 25.4733 19.095 25.8407 20.0807 26.0501C21.2347 26.3223 22.6789 26.5727 24.4134 26.8014C24.6493 26.8271 24.8688 26.938 25.0327 27.1144C25.185 27.2815 25.2677 27.5033 25.263 27.7323C25.2662 27.9634 25.1839 28.1872 25.0327 28.3583C24.8722 28.5382 24.6503 28.6474 24.4134 28.6632C22.9509 28.7659 21.4954 28.9559 20.0542 29.232C19.046 29.4136 18.075 29.7698 17.1826 30.2854C16.4365 30.7497 15.8216 31.4065 15.3987 32.1908C14.8949 33.1535 14.531 34.187 14.3188 35.2584C14.04 36.5068 13.7842 38.0429 13.5513 39.8666C13.5238 40.1013 13.4192 40.3193 13.2548 40.4845C13.1681 40.5618 13.0673 40.6207 12.9583 40.6576C12.8492 40.6945 12.7341 40.7087 12.6196 40.6995Z\"\n        fill={themeVars.colors.textSecondary}\n        className={styles.path}\n      />\n    </svg>\n  )\n}\n","import { ChainId } from '@uniswap/smart-order-router'\nimport { sendAnalyticsEvent } from 'analytics'\nimport { EventName, PageName } from 'analytics/constants'\nimport { useTrace } from 'analytics/Trace'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  ActivityExternalLinkIcon,\n  ActivityListingIcon,\n  ActivitySaleIcon,\n  ActivityTransferIcon,\n  CancelListingIcon,\n  RarityVerifiedIcon,\n} from 'nft/components/icons'\nimport {\n  ActivityEvent,\n  ActivityEventType,\n  ActivityEventTypeDisplay,\n  BagItem,\n  GenieAsset,\n  Markets,\n  OrderStatus,\n  TokenMetadata,\n  TokenRarity,\n} from 'nft/types'\nimport { shortenAddress } from 'nft/utils/address'\nimport { buildActivityAsset } from 'nft/utils/buildActivityAsset'\nimport { formatEthPrice } from 'nft/utils/currency'\nimport { getTimeDifference, isValidDate } from 'nft/utils/date'\nimport { putCommas } from 'nft/utils/putCommas'\nimport { fallbackProvider, getRarityProviderLogo } from 'nft/utils/rarity'\nimport { MouseEvent, useMemo, useState } from 'react'\nimport styled from 'styled-components/macro'\nimport { ExternalLink } from 'theme'\nimport { ExplorerDataType, getExplorerLink } from 'utils/getExplorerLink'\n\nimport * as styles from './Activity.css'\n\nconst AddressLink = styled(ExternalLink)`\n  color: ${({ theme }) => theme.textPrimary};\n  text-decoration: none;\n  a {\n    color: ${({ theme }) => theme.textPrimary};\n    text-decoration: none;\n  }\n  a:hover {\n    color: ${({ theme }) => theme.textPrimary};\n    text-decoration: none;\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n  a:focus {\n    color: ${({ theme }) => theme.textPrimary};\n    text-decoration: none;\n    opacity: ${({ theme }) => theme.opacity.click};\n  }\n`\n\nconst formatListingStatus = (status: OrderStatus): string => {\n  switch (status) {\n    case OrderStatus.EXECUTED:\n      return 'Sold'\n    case OrderStatus.CANCELLED:\n      return 'Cancelled'\n    case OrderStatus.EXPIRED:\n      return 'Expired'\n    case OrderStatus.VALID:\n      return 'Buy Now'\n  }\n}\n\ninterface BuyCellProps {\n  event: ActivityEvent\n  collectionName: string\n  selectAsset: (assets: GenieAsset[]) => void\n  removeAsset: (assets: GenieAsset[]) => void\n  itemsInBag: BagItem[]\n  cartExpanded: boolean\n  toggleCart: () => void\n  isMobile: boolean\n  ethPriceInUSD: number\n}\n\nexport const BuyCell = ({\n  event,\n  collectionName,\n  selectAsset,\n  removeAsset,\n  itemsInBag,\n  cartExpanded,\n  toggleCart,\n  isMobile,\n  ethPriceInUSD,\n}: BuyCellProps) => {\n  const asset = useMemo(\n    () => buildActivityAsset(event, collectionName, ethPriceInUSD),\n    [event, collectionName, ethPriceInUSD]\n  )\n  const isSelected = useMemo(() => {\n    return itemsInBag.some((item) => asset.tokenId === item.asset.tokenId && asset.address === item.asset.address)\n  }, [asset, itemsInBag])\n\n  const trace = useTrace({ page: PageName.NFT_COLLECTION_PAGE })\n\n  const eventProperties = {\n    collection_address: asset.address,\n    token_id: asset.tokenId,\n    token_type: asset.tokenType,\n    ...trace,\n  }\n\n  return (\n    <Column display={{ sm: 'none', lg: 'flex' }} height=\"full\" justifyContent=\"center\" marginX=\"auto\">\n      {event.eventType === ActivityEventType.Listing && event.orderStatus ? (\n        <Box\n          as=\"button\"\n          className={event.orderStatus === OrderStatus.VALID && isSelected ? styles.removeCell : styles.buyCell}\n          onClick={(e: MouseEvent) => {\n            e.preventDefault()\n            isSelected ? removeAsset([asset]) : selectAsset([asset])\n            !isSelected && !cartExpanded && !isMobile && toggleCart()\n            !isSelected && sendAnalyticsEvent(EventName.NFT_BUY_ADDED, { eventProperties })\n          }}\n          disabled={event.orderStatus !== OrderStatus.VALID}\n        >\n          {event.orderStatus === OrderStatus.VALID ? (\n            <>{`${itemsInBag.length === 0 ? 'Buy Now' : isSelected ? 'Remove' : 'Add to bag'}`}</>\n          ) : (\n            <>{`${formatListingStatus(event.orderStatus)}`}</>\n          )}\n        </Box>\n      ) : (\n        '-'\n      )}\n    </Column>\n  )\n}\n\ninterface AddressCellProps {\n  address?: string\n  desktopLBreakpoint?: boolean\n  chainId?: number\n}\n\nexport const AddressCell = ({ address, desktopLBreakpoint, chainId }: AddressCellProps) => {\n  return (\n    <Column\n      display={{ sm: 'none', xl: desktopLBreakpoint ? 'none' : 'flex', xxl: 'flex' }}\n      className={styles.addressCell}\n    >\n      <AddressLink\n        href={getExplorerLink(chainId ?? ChainId.MAINNET, address ?? '', ExplorerDataType.ADDRESS)}\n        style={{ textDecoration: 'none' }}\n      >\n        <Box onClick={(e) => e.stopPropagation()}>{address ? shortenAddress(address, 2, 4) : '-'}</Box>\n      </AddressLink>\n    </Column>\n  )\n}\n\nexport const MarketplaceIcon = ({ marketplace }: { marketplace: Markets }) => {\n  return (\n    <Box\n      as=\"img\"\n      alt={marketplace}\n      src={`/nft/svgs/marketplaces/${marketplace}.svg`}\n      className={styles.marketplaceIcon}\n    />\n  )\n}\n\nconst PriceTooltip = ({ price }: { price: string }) => (\n  <MouseoverTooltip\n    text={\n      <Box textAlign=\"left\" fontSize=\"14\" fontWeight=\"normal\" color=\"textSecondary\">\n        {`${price} ETH`}\n      </Box>\n    }\n    placement=\"top\"\n  >\n    <Box>{`${price.substring(0, 5)}... ETH`}</Box>\n  </MouseoverTooltip>\n)\n\nexport const PriceCell = ({ marketplace, price }: { marketplace?: Markets; price?: string }) => {\n  const formattedPrice = useMemo(() => (price ? putCommas(formatEthPrice(price))?.toString() : null), [price])\n\n  return (\n    <Row display={{ sm: 'none', md: 'flex' }} gap=\"8\">\n      {marketplace && <MarketplaceIcon marketplace={marketplace} />}\n      {formattedPrice ? (\n        formattedPrice.length > 6 ? (\n          <PriceTooltip price={formattedPrice} />\n        ) : (\n          <>{`${formattedPrice} ETH`}</>\n        )\n      ) : (\n        <>-</>\n      )}\n    </Row>\n  )\n}\n\ninterface EventCellProps {\n  eventType: ActivityEventType\n  eventTimestamp?: number\n  eventTransactionHash?: string\n  eventOnly?: boolean\n  price?: string\n  isMobile?: boolean\n}\n\nconst renderEventIcon = (eventType: ActivityEventType) => {\n  switch (eventType) {\n    case ActivityEventType.Listing:\n      return <ActivityListingIcon width={16} height={16} />\n    case ActivityEventType.Sale:\n      return <ActivitySaleIcon width={16} height={16} />\n    case ActivityEventType.Transfer:\n      return <ActivityTransferIcon width={16} height={16} />\n    case ActivityEventType.CancelListing:\n      return <CancelListingIcon width={16} height={16} />\n    default:\n      return null\n  }\n}\n\nconst openEtherscanLinkInNewTab = (e: MouseEvent, transactionHash: string) => {\n  e.preventDefault()\n  window.open(`https://etherscan.io/tx/${transactionHash}`, '_blank', 'noopener,noreferrer')\n}\n\nconst ExternalLinkIcon = ({ transactionHash }: { transactionHash: string }) => (\n  <Row onClick={(e: MouseEvent) => openEtherscanLinkInNewTab(e, transactionHash)} marginLeft=\"4\">\n    <ActivityExternalLinkIcon />\n  </Row>\n)\n\nconst eventColors = (eventType: ActivityEventType) => {\n  const activityEvents = {\n    [ActivityEventType.Listing]: 'gold',\n    [ActivityEventType.Sale]: 'green',\n    [ActivityEventType.Transfer]: 'violet',\n    [ActivityEventType.CancelListing]: 'accentFailure',\n  }\n\n  return activityEvents[eventType] as 'gold' | 'green' | 'violet' | 'accentFailure'\n}\n\nexport const EventCell = ({\n  eventType,\n  eventTimestamp,\n  eventTransactionHash,\n  eventOnly,\n  price,\n  isMobile,\n}: EventCellProps) => {\n  const formattedPrice = useMemo(() => (price ? putCommas(formatEthPrice(price))?.toString() : null), [price])\n  return (\n    <Column height=\"full\" justifyContent=\"center\" gap=\"4\">\n      <Row className={styles.eventDetail} color={eventColors(eventType)}>\n        {renderEventIcon(eventType)}\n        {ActivityEventTypeDisplay[eventType]}\n      </Row>\n      {eventTimestamp && isValidDate(eventTimestamp) && !isMobile && !eventOnly && (\n        <Row className={styles.eventTime}>\n          {getTimeDifference(eventTimestamp.toString())}\n          {eventTransactionHash && <ExternalLinkIcon transactionHash={eventTransactionHash} />}\n        </Row>\n      )}\n      {isMobile && price && <Row fontSize=\"16\" fontWeight=\"normal\" color=\"textPrimary\">{`${formattedPrice} ETH`}</Row>}\n    </Column>\n  )\n}\n\ninterface ItemCellProps {\n  event: ActivityEvent\n  rarityVerified: boolean\n  collectionName: string\n  isMobile: boolean\n  eventTimestamp?: number\n}\n\nconst NoContentContainer = () => (\n  <Box\n    position=\"relative\"\n    style={{\n      background: `#24272e`,\n    }}\n    className={styles.detailsImage}\n  >\n    <Box\n      position=\"absolute\"\n      textAlign=\"center\"\n      left=\"1/2\"\n      top=\"1/2\"\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n      color=\"grey500\"\n      fontSize=\"12\"\n      fontWeight=\"normal\"\n    >\n      Image\n      <br />\n      not\n      <br />\n      available\n    </Box>\n  </Box>\n)\n\ninterface RankingProps {\n  rarity: TokenRarity\n  collectionName: string\n  rarityVerified: boolean\n  details?: boolean\n}\n\nconst Ranking = ({ details, rarity, collectionName, rarityVerified }: RankingProps) => {\n  const rarityProviderLogo = getRarityProviderLogo(rarity.source)\n\n  return (\n    <Box>\n      <MouseoverTooltip\n        text={\n          <Row>\n            <Box display=\"flex\" marginRight=\"4\">\n              <img src={rarityProviderLogo} alt=\"cardLogo\" width={16} />\n            </Box>\n            <Box width=\"full\" fontSize=\"14\">\n              {rarityVerified\n                ? `Verified by ${collectionName}`\n                : `Ranking by ${rarity.source === 'Genie' ? fallbackProvider : rarity.source}`}\n            </Box>\n          </Row>\n        }\n        placement=\"top\"\n      >\n        <Box className={styles.rarityInfo}>\n          <Box paddingTop=\"2\" paddingBottom=\"2\" display=\"flex\">\n            {putCommas(rarity.rank)}\n          </Box>\n\n          <Box display=\"flex\" height=\"16\">\n            {rarityVerified ? <RarityVerifiedIcon /> : null}\n          </Box>\n        </Box>\n      </MouseoverTooltip>\n    </Box>\n  )\n}\n\nconst getItemImage = (tokenMetadata?: TokenMetadata): string | undefined => {\n  return tokenMetadata?.smallImageUrl || tokenMetadata?.imageUrl\n}\n\nexport const ItemCell = ({ event, rarityVerified, collectionName, eventTimestamp, isMobile }: ItemCellProps) => {\n  const [loaded, setLoaded] = useState(false)\n  const [noContent, setNoContent] = useState(!getItemImage(event.tokenMetadata))\n\n  return (\n    <Row gap=\"16\" overflow=\"hidden\" whiteSpace=\"nowrap\">\n      {!noContent ? (\n        <Box\n          as={'img'}\n          alt={event.tokenMetadata?.name || event.tokenId}\n          src={getItemImage(event.tokenMetadata)}\n          draggable={false}\n          className={styles.detailsImage}\n          style={{\n            background: loaded ? 'none' : '#24272e',\n          }}\n          onLoad={() => setLoaded(true)}\n          onError={() => setNoContent(true)}\n        />\n      ) : (\n        <NoContentContainer />\n      )}\n      <Column height=\"full\" justifyContent=\"center\" overflow=\"hidden\" whiteSpace=\"nowrap\" marginRight=\"24\">\n        <Box className={styles.detailsName}>{event.tokenMetadata?.name || event.tokenId}</Box>\n        {event.tokenMetadata?.rarity && !isMobile && (\n          <Ranking\n            rarity={event.tokenMetadata?.rarity}\n            rarityVerified={rarityVerified}\n            collectionName={collectionName}\n          />\n        )}\n        {isMobile && eventTimestamp && isValidDate(eventTimestamp) && getTimeDifference(eventTimestamp.toString())}\n      </Column>\n    </Row>\n  )\n}\n","export const isValidDate = (date: number): boolean => {\n  const d = Date.parse(date.toString())\n  return isNaN(d) ? false : true\n}\n\nexport const getTimeDifference = (eventTimestamp: string) => {\n  const date = new Date(eventTimestamp).getTime()\n  const diff = new Date().getTime() - date\n\n  const days = Math.floor(diff / (1000 * 60 * 60 * 24))\n  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))\n\n  if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`\n  if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`\n  if (minutes > 1) return `${minutes} minutes ago`\n  return 'Just now'\n}\n","import clsx from 'clsx'\nimport { Box } from 'nft/components/Box'\nimport { LoadingSparkle } from 'nft/components/common/Loading/LoadingSparkle'\nimport { Center, Column, Row } from 'nft/components/Flex'\nimport { useBag, useIsMobile } from 'nft/hooks'\nimport { ActivityFetcher } from 'nft/queries/genie/ActivityFetcher'\nimport { ActivityEvent, ActivityEventResponse, ActivityEventType } from 'nft/types'\nimport { fetchPrice } from 'nft/utils/fetchPrice'\nimport { useCallback, useEffect, useMemo, useReducer, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport { useInfiniteQuery } from 'react-query'\n\nimport * as styles from './Activity.css'\nimport { AddressCell, BuyCell, EventCell, ItemCell, PriceCell } from './ActivityCells'\nimport { ActivityLoader } from './ActivityLoader'\n\nenum ColumnHeaders {\n  Item = 'Item',\n  Event = 'Event',\n  Price = 'Price',\n  By = 'By',\n  To = 'To',\n}\n\nexport const HeaderRow = () => {\n  return (\n    <Box className={styles.headerRow}>\n      <Box>{ColumnHeaders.Item}</Box>\n      <Box>{ColumnHeaders.Event}</Box>\n      <Box display={{ sm: 'none', md: 'block' }}>{ColumnHeaders.Price}</Box>\n      <Box display={{ sm: 'none', xl: 'block' }}>{ColumnHeaders.By}</Box>\n      <Box display={{ sm: 'none', xxl: 'block' }}>{ColumnHeaders.To}</Box>\n    </Box>\n  )\n}\n\ninterface ActivityProps {\n  contractAddress: string\n  rarityVerified: boolean\n  collectionName: string\n  chainId?: number\n}\n\nconst initialFilterState = {\n  [ActivityEventType.Listing]: true,\n  [ActivityEventType.Sale]: true,\n  [ActivityEventType.Transfer]: false,\n  [ActivityEventType.CancelListing]: false,\n}\n\nexport const reduceFilters = (state: typeof initialFilterState, action: { eventType: ActivityEventType }) => {\n  return { ...state, [action.eventType]: !state[action.eventType] }\n}\n\nconst baseHref = (event: ActivityEvent) => `/#/nfts/asset/${event.collectionAddress}/${event.tokenId}?origin=activity`\n\nexport const Activity = ({ contractAddress, rarityVerified, collectionName, chainId }: ActivityProps) => {\n  const [activeFilters, filtersDispatch] = useReducer(reduceFilters, initialFilterState)\n\n  const {\n    data: eventsData,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isSuccess,\n    isLoading,\n  } = useInfiniteQuery<ActivityEventResponse>(\n    [\n      'collectionActivity',\n      {\n        contractAddress,\n        activeFilters,\n      },\n    ],\n    async ({ pageParam = '' }) => {\n      return await ActivityFetcher(\n        contractAddress,\n        {\n          eventTypes: Object.keys(activeFilters)\n            .filter((key) => activeFilters[key as ActivityEventType])\n            .map((key) => key as ActivityEventType),\n        },\n        pageParam\n      )\n    },\n    {\n      getNextPageParam: (lastPage) => {\n        return lastPage.events?.length === 25 ? lastPage.cursor : undefined\n      },\n      refetchInterval: 15000,\n      refetchIntervalInBackground: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    }\n  )\n\n  const events = useMemo(\n    () => (isSuccess ? eventsData?.pages.map((page) => page.events).flat() : null),\n    [isSuccess, eventsData]\n  )\n\n  const itemsInBag = useBag((state) => state.itemsInBag)\n  const addAssetsToBag = useBag((state) => state.addAssetsToBag)\n  const removeAssetsFromBag = useBag((state) => state.removeAssetsFromBag)\n  const cartExpanded = useBag((state) => state.bagExpanded)\n  const toggleCart = useBag((state) => state.toggleBag)\n  const isMobile = useIsMobile()\n  const [ethPriceInUSD, setEthPriceInUSD] = useState(0)\n\n  useEffect(() => {\n    fetchPrice().then((price) => {\n      setEthPriceInUSD(price || 0)\n    })\n  }, [])\n\n  const Filter = useCallback(\n    function ActivityFilter({ eventType }: { eventType: ActivityEventType }) {\n      const isActive = activeFilters[eventType]\n\n      return (\n        <Box\n          className={clsx(styles.filter, isActive && styles.activeFilter)}\n          onClick={() => filtersDispatch({ eventType })}\n        >\n          {eventType.charAt(0) + eventType.slice(1).toLowerCase() + 's'}\n        </Box>\n      )\n    },\n    [activeFilters]\n  )\n\n  return (\n    <Box>\n      <Row gap=\"8\" paddingTop={{ sm: '0', md: '16' }}>\n        <Filter eventType={ActivityEventType.Listing} />\n        <Filter eventType={ActivityEventType.Sale} />\n        <Filter eventType={ActivityEventType.Transfer} />\n      </Row>\n      {isLoading && <ActivityLoader />}\n      {events && (\n        <Column marginTop=\"36\">\n          <HeaderRow />\n          <InfiniteScroll\n            next={fetchNextPage}\n            hasMore={!!hasNextPage}\n            loader={\n              isFetchingNextPage ? (\n                <Center paddingY=\"20\">\n                  <LoadingSparkle />\n                </Center>\n              ) : null\n            }\n            dataLength={events?.length ?? 0}\n            style={{ overflow: 'unset' }}\n          >\n            {events.map((event, i) => (\n              <Box as=\"a\" href={baseHref(event)} className={styles.eventRow} key={i}>\n                <ItemCell\n                  event={event}\n                  rarityVerified={rarityVerified}\n                  collectionName={collectionName}\n                  eventTimestamp={event.eventTimestamp}\n                  isMobile={isMobile}\n                />\n                <EventCell\n                  eventType={event.eventType}\n                  eventTimestamp={event.eventTimestamp}\n                  eventTransactionHash={event.transactionHash}\n                  price={event.price}\n                  isMobile={isMobile}\n                />\n                <PriceCell marketplace={event.marketplace} price={event.price} />\n                <AddressCell address={event.fromAddress} chainId={chainId} />\n                <AddressCell address={event.toAddress} chainId={chainId} desktopLBreakpoint />\n                <BuyCell\n                  event={event}\n                  collectionName={collectionName}\n                  selectAsset={addAssetsToBag}\n                  removeAsset={removeAssetsFromBag}\n                  itemsInBag={itemsInBag}\n                  cartExpanded={cartExpanded}\n                  toggleCart={toggleCart}\n                  isMobile={isMobile}\n                  ethPriceInUSD={ethPriceInUSD}\n                />\n              </Box>\n            ))}\n          </InfiniteScroll>\n        </Column>\n      )}\n    </Box>\n  )\n}\n","import { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\n\nimport { HeaderRow } from './Activity'\nimport { eventRow } from './Activity.css'\nimport * as styles from './ActivityLoader.css'\n\nconst LoadingSquare = () => {\n  return <Box className={styles.loadingSquare} />\n}\n\nconst LoadingSliver = () => {\n  return <Box className={styles.loadingSliver} />\n}\n\nexport const ActivityLoader = () => {\n  return (\n    <Column marginTop=\"36\">\n      <HeaderRow />\n      {[...Array(10)].map((_, i) => (\n        <Box as=\"a\" className={eventRow} key={i}>\n          <Row gap=\"16\">\n            <LoadingSquare />\n            <LoadingSliver />\n          </Row>\n          <Row>\n            <LoadingSliver />\n          </Row>\n          <Row display={{ sm: 'none', md: 'flex' }}>\n            <LoadingSliver />\n          </Row>\n          <Row display={{ sm: 'none', lg: 'flex' }}>\n            <LoadingSliver />\n          </Row>\n          <Row display={{ sm: 'none', xl: 'flex' }}>\n            <LoadingSliver />\n          </Row>\n        </Box>\n      ))}\n    </Column>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/loading.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/loading.css.ts.vanilla.css\\\",\\\"source\\\":\\\"QGtleWZyYW1lcyBfMmtkdmZ3MCB7CiAgMCUgewogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMTAwJSA1MCU7CiAgfQogIDEwMCUgewogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCUgNTAlOwogIH0KfQouXzJrZHZmdzEgewogIGFuaW1hdGlvbjogXzJrZHZmdzAgMS41cyBpbmZpbml0ZTsKICBhbmltYXRpb24tZmlsbC1tb2RlOiBib3RoOwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBsZWZ0LCAjN0M4NUEyNEQgMjUlLCByZ2JhKDAsMCwwLDAuMykgNTAlLCAjN0M4NUEyNEQgNzUlKTsKICBiYWNrZ3JvdW5kLXNpemU6IDQwMCU7CiAgd2lsbC1jaGFuZ2U6IGJhY2tncm91bmQtcG9zaXRpb247Cn0KLl8ya2R2ZnczIHsKICB1c2VyLXNlbGVjdDogbm9uZTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/collection/ActivityLoader.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/collection/ActivityLoader.css.ts.vanilla.css\\\",\\\"source\\\":\\\"LmZiamFyNDMgewogIHdpZHRoOiAxMDhweDsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var loadingSquare = '_2kdvfw1 rgw6ez12h rgw6ez195 rgw6ez6lx';\nexport var loadingSliver = 'fbjar43 _2kdvfw1 rgw6ez16n rgw6ez6n5';","/**\n * @generated SignedSource<<bebe1b1773d4ce8f1625348654261b2d>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type Currency = \"ETH\" | \"USD\" | \"%future added value\";\nexport type NftMarketplace = \"CRYPTOPUNKS\" | \"FOUNDATION\" | \"LOOKSRARE\" | \"NFT20\" | \"NFTX\" | \"OPENSEA\" | \"SUDOSWAP\" | \"X2Y2\" | \"%future added value\";\nexport type NftRarityProvider = \"RARITY_SNIPER\" | \"%future added value\";\nexport type NftStandard = \"ERC1155\" | \"ERC721\" | \"NONCOMPLIANT\" | \"%future added value\";\nexport type OrderStatus = \"CANCELLED\" | \"EXECUTED\" | \"EXPIRED\" | \"VALID\" | \"%future added value\";\nexport type OrderType = \"LISTING\" | \"OFFER\" | \"%future added value\";\nexport type DetailsQuery$variables = {\n  address: string;\n  tokenId: string;\n};\nexport type DetailsQuery$data = {\n  readonly nftAssets: {\n    readonly edges: ReadonlyArray<{\n      readonly node: {\n        readonly animationUrl: string | null;\n        readonly collection: {\n          readonly description: string | null;\n          readonly image: {\n            readonly url: string;\n          } | null;\n          readonly isVerified: boolean | null;\n          readonly name: string | null;\n          readonly nftContracts: ReadonlyArray<{\n            readonly address: string;\n            readonly standard: NftStandard | null;\n          }> | null;\n          readonly numAssets: number | null;\n        } | null;\n        readonly creator: {\n          readonly address: string;\n          readonly isVerified: boolean | null;\n          readonly profileImage: {\n            readonly url: string;\n          } | null;\n        } | null;\n        readonly description: string | null;\n        readonly id: string;\n        readonly image: {\n          readonly url: string;\n        } | null;\n        readonly listings: {\n          readonly edges: ReadonlyArray<{\n            readonly cursor: string;\n            readonly node: {\n              readonly address: string;\n              readonly createdAt: number;\n              readonly endAt: number | null;\n              readonly id: string;\n              readonly maker: string;\n              readonly marketplace: NftMarketplace;\n              readonly marketplaceUrl: string;\n              readonly orderHash: string | null;\n              readonly price: {\n                readonly currency: Currency | null;\n                readonly value: number;\n              };\n              readonly protocolParameters: any | null;\n              readonly quantity: number;\n              readonly startAt: number;\n              readonly status: OrderStatus;\n              readonly taker: string | null;\n              readonly tokenId: string | null;\n              readonly type: OrderType;\n            };\n          }>;\n        } | null;\n        readonly metadataUrl: string | null;\n        readonly name: string | null;\n        readonly originalImage: {\n          readonly url: string;\n        } | null;\n        readonly ownerAddress: string | null;\n        readonly rarities: ReadonlyArray<{\n          readonly provider: NftRarityProvider | null;\n          readonly rank: number | null;\n          readonly score: number | null;\n        }> | null;\n        readonly smallImage: {\n          readonly url: string;\n        } | null;\n        readonly suspiciousFlag: boolean | null;\n        readonly tokenId: string;\n        readonly traits: ReadonlyArray<{\n          readonly name: string | null;\n          readonly value: string | null;\n        }> | null;\n      };\n    }>;\n  } | null;\n};\nexport type DetailsQuery = {\n  response: DetailsQuery$data;\n  variables: DetailsQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"address\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"tokenId\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"address\",\n    \"variableName\": \"address\"\n  },\n  {\n    \"fields\": [\n      {\n        \"kind\": \"Literal\",\n        \"name\": \"listed\",\n        \"value\": false\n      },\n      {\n        \"items\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"tokenIds.0\",\n            \"variableName\": \"tokenId\"\n          }\n        ],\n        \"kind\": \"ListValue\",\n        \"name\": \"tokenIds\"\n      }\n    ],\n    \"kind\": \"ObjectValue\",\n    \"name\": \"filter\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"ownerAddress\",\n  \"storageKey\": null\n},\nv5 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"url\",\n  \"storageKey\": null\n},\nv6 = [\n  (v5/*: any*/)\n],\nv7 = {\n  \"alias\": null,\n  \"args\": null,\n  \"concreteType\": \"Image\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"image\",\n  \"plural\": false,\n  \"selections\": (v6/*: any*/),\n  \"storageKey\": null\n},\nv8 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"tokenId\",\n  \"storageKey\": null\n},\nv9 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"description\",\n  \"storageKey\": null\n},\nv10 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"animationUrl\",\n  \"storageKey\": null\n},\nv11 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"suspiciousFlag\",\n  \"storageKey\": null\n},\nv12 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"address\",\n  \"storageKey\": null\n},\nv13 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"isVerified\",\n  \"storageKey\": null\n},\nv14 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"numAssets\",\n  \"storageKey\": null\n},\nv15 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"standard\",\n  \"storageKey\": null\n},\nv16 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"first\",\n    \"value\": 1\n  }\n],\nv17 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"createdAt\",\n  \"storageKey\": null\n},\nv18 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"endAt\",\n  \"storageKey\": null\n},\nv19 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"maker\",\n  \"storageKey\": null\n},\nv20 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"marketplace\",\n  \"storageKey\": null\n},\nv21 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"marketplaceUrl\",\n  \"storageKey\": null\n},\nv22 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"orderHash\",\n  \"storageKey\": null\n},\nv23 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"currency\",\n  \"storageKey\": null\n},\nv24 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"value\",\n  \"storageKey\": null\n},\nv25 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"quantity\",\n  \"storageKey\": null\n},\nv26 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"startAt\",\n  \"storageKey\": null\n},\nv27 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"status\",\n  \"storageKey\": null\n},\nv28 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"taker\",\n  \"storageKey\": null\n},\nv29 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"type\",\n  \"storageKey\": null\n},\nv30 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"protocolParameters\",\n  \"storageKey\": null\n},\nv31 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"cursor\",\n  \"storageKey\": null\n},\nv32 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"provider\",\n  \"storageKey\": null\n},\nv33 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"rank\",\n  \"storageKey\": null\n},\nv34 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"score\",\n  \"storageKey\": null\n},\nv35 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"metadataUrl\",\n  \"storageKey\": null\n},\nv36 = [\n  (v5/*: any*/),\n  (v2/*: any*/)\n],\nv37 = {\n  \"alias\": null,\n  \"args\": null,\n  \"concreteType\": \"Image\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"image\",\n  \"plural\": false,\n  \"selections\": (v36/*: any*/),\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"DetailsQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"NftAssetConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"nftAssets\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"NftAssetEdge\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"edges\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"NftAsset\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"node\",\n                \"plural\": false,\n                \"selections\": [\n                  (v2/*: any*/),\n                  (v3/*: any*/),\n                  (v4/*: any*/),\n                  (v7/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"Image\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"smallImage\",\n                    \"plural\": false,\n                    \"selections\": (v6/*: any*/),\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"Image\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"originalImage\",\n                    \"plural\": false,\n                    \"selections\": (v6/*: any*/),\n                    \"storageKey\": null\n                  },\n                  (v8/*: any*/),\n                  (v9/*: any*/),\n                  (v10/*: any*/),\n                  (v11/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"NftProfile\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"creator\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v12/*: any*/),\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"Image\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"profileImage\",\n                        \"plural\": false,\n                        \"selections\": (v6/*: any*/),\n                        \"storageKey\": null\n                      },\n                      (v13/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"NftCollection\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"collection\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v3/*: any*/),\n                      (v13/*: any*/),\n                      (v14/*: any*/),\n                      (v7/*: any*/),\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"NftContract\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"nftContracts\",\n                        \"plural\": true,\n                        \"selections\": [\n                          (v12/*: any*/),\n                          (v15/*: any*/)\n                        ],\n                        \"storageKey\": null\n                      },\n                      (v9/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": (v16/*: any*/),\n                    \"concreteType\": \"NftOrderConnection\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"listings\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"NftOrderEdge\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"edges\",\n                        \"plural\": true,\n                        \"selections\": [\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"concreteType\": \"NftOrder\",\n                            \"kind\": \"LinkedField\",\n                            \"name\": \"node\",\n                            \"plural\": false,\n                            \"selections\": [\n                              (v12/*: any*/),\n                              (v17/*: any*/),\n                              (v18/*: any*/),\n                              (v2/*: any*/),\n                              (v19/*: any*/),\n                              (v20/*: any*/),\n                              (v21/*: any*/),\n                              (v22/*: any*/),\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"concreteType\": \"Amount\",\n                                \"kind\": \"LinkedField\",\n                                \"name\": \"price\",\n                                \"plural\": false,\n                                \"selections\": [\n                                  (v23/*: any*/),\n                                  (v24/*: any*/)\n                                ],\n                                \"storageKey\": null\n                              },\n                              (v25/*: any*/),\n                              (v26/*: any*/),\n                              (v27/*: any*/),\n                              (v28/*: any*/),\n                              (v8/*: any*/),\n                              (v29/*: any*/),\n                              (v30/*: any*/)\n                            ],\n                            \"storageKey\": null\n                          },\n                          (v31/*: any*/)\n                        ],\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": \"listings(first:1)\"\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"NftAssetRarity\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"rarities\",\n                    \"plural\": true,\n                    \"selections\": [\n                      (v32/*: any*/),\n                      (v33/*: any*/),\n                      (v34/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  },\n                  (v35/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"NftAssetTrait\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"traits\",\n                    \"plural\": true,\n                    \"selections\": [\n                      (v3/*: any*/),\n                      (v24/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"DetailsQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"NftAssetConnection\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"nftAssets\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"NftAssetEdge\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"edges\",\n            \"plural\": true,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"concreteType\": \"NftAsset\",\n                \"kind\": \"LinkedField\",\n                \"name\": \"node\",\n                \"plural\": false,\n                \"selections\": [\n                  (v2/*: any*/),\n                  (v3/*: any*/),\n                  (v4/*: any*/),\n                  (v37/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"Image\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"smallImage\",\n                    \"plural\": false,\n                    \"selections\": (v36/*: any*/),\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"Image\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"originalImage\",\n                    \"plural\": false,\n                    \"selections\": (v36/*: any*/),\n                    \"storageKey\": null\n                  },\n                  (v8/*: any*/),\n                  (v9/*: any*/),\n                  (v10/*: any*/),\n                  (v11/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"NftProfile\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"creator\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v12/*: any*/),\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"Image\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"profileImage\",\n                        \"plural\": false,\n                        \"selections\": (v36/*: any*/),\n                        \"storageKey\": null\n                      },\n                      (v13/*: any*/),\n                      (v2/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"NftCollection\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"collection\",\n                    \"plural\": false,\n                    \"selections\": [\n                      (v3/*: any*/),\n                      (v13/*: any*/),\n                      (v14/*: any*/),\n                      (v37/*: any*/),\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"NftContract\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"nftContracts\",\n                        \"plural\": true,\n                        \"selections\": [\n                          (v12/*: any*/),\n                          (v15/*: any*/),\n                          (v2/*: any*/)\n                        ],\n                        \"storageKey\": null\n                      },\n                      (v9/*: any*/),\n                      (v2/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": (v16/*: any*/),\n                    \"concreteType\": \"NftOrderConnection\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"listings\",\n                    \"plural\": false,\n                    \"selections\": [\n                      {\n                        \"alias\": null,\n                        \"args\": null,\n                        \"concreteType\": \"NftOrderEdge\",\n                        \"kind\": \"LinkedField\",\n                        \"name\": \"edges\",\n                        \"plural\": true,\n                        \"selections\": [\n                          {\n                            \"alias\": null,\n                            \"args\": null,\n                            \"concreteType\": \"NftOrder\",\n                            \"kind\": \"LinkedField\",\n                            \"name\": \"node\",\n                            \"plural\": false,\n                            \"selections\": [\n                              (v12/*: any*/),\n                              (v17/*: any*/),\n                              (v18/*: any*/),\n                              (v2/*: any*/),\n                              (v19/*: any*/),\n                              (v20/*: any*/),\n                              (v21/*: any*/),\n                              (v22/*: any*/),\n                              {\n                                \"alias\": null,\n                                \"args\": null,\n                                \"concreteType\": \"Amount\",\n                                \"kind\": \"LinkedField\",\n                                \"name\": \"price\",\n                                \"plural\": false,\n                                \"selections\": [\n                                  (v23/*: any*/),\n                                  (v24/*: any*/),\n                                  (v2/*: any*/)\n                                ],\n                                \"storageKey\": null\n                              },\n                              (v25/*: any*/),\n                              (v26/*: any*/),\n                              (v27/*: any*/),\n                              (v28/*: any*/),\n                              (v8/*: any*/),\n                              (v29/*: any*/),\n                              (v30/*: any*/)\n                            ],\n                            \"storageKey\": null\n                          },\n                          (v31/*: any*/)\n                        ],\n                        \"storageKey\": null\n                      }\n                    ],\n                    \"storageKey\": \"listings(first:1)\"\n                  },\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"NftAssetRarity\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"rarities\",\n                    \"plural\": true,\n                    \"selections\": [\n                      (v32/*: any*/),\n                      (v33/*: any*/),\n                      (v34/*: any*/),\n                      (v2/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  },\n                  (v35/*: any*/),\n                  {\n                    \"alias\": null,\n                    \"args\": null,\n                    \"concreteType\": \"NftAssetTrait\",\n                    \"kind\": \"LinkedField\",\n                    \"name\": \"traits\",\n                    \"plural\": true,\n                    \"selections\": [\n                      (v3/*: any*/),\n                      (v24/*: any*/),\n                      (v2/*: any*/)\n                    ],\n                    \"storageKey\": null\n                  }\n                ],\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"93bbf0197f9d769ddfac3928ada404df\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"DetailsQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query DetailsQuery(\\n  $address: String!\\n  $tokenId: String!\\n) {\\n  nftAssets(address: $address, filter: {listed: false, tokenIds: [$tokenId]}) {\\n    edges {\\n      node {\\n        id\\n        name\\n        ownerAddress\\n        image {\\n          url\\n          id\\n        }\\n        smallImage {\\n          url\\n          id\\n        }\\n        originalImage {\\n          url\\n          id\\n        }\\n        tokenId\\n        description\\n        animationUrl\\n        suspiciousFlag\\n        creator {\\n          address\\n          profileImage {\\n            url\\n            id\\n          }\\n          isVerified\\n          id\\n        }\\n        collection {\\n          name\\n          isVerified\\n          numAssets\\n          image {\\n            url\\n            id\\n          }\\n          nftContracts {\\n            address\\n            standard\\n            id\\n          }\\n          description\\n          id\\n        }\\n        listings(first: 1) {\\n          edges {\\n            node {\\n              address\\n              createdAt\\n              endAt\\n              id\\n              maker\\n              marketplace\\n              marketplaceUrl\\n              orderHash\\n              price {\\n                currency\\n                value\\n                id\\n              }\\n              quantity\\n              startAt\\n              status\\n              taker\\n              tokenId\\n              type\\n              protocolParameters\\n            }\\n            cursor\\n          }\\n        }\\n        rarities {\\n          provider\\n          rank\\n          score\\n          id\\n        }\\n        metadataUrl\\n        traits {\\n          name\\n          value\\n          id\\n        }\\n      }\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"7e035610a60decbfcd5c9cb14f3984fb\";\n\nexport default node;\n","import { parseEther } from '@ethersproject/units'\nimport graphql from 'babel-plugin-relay/macro'\nimport { CollectionInfoForAsset, GenieAsset, SellOrder, TokenType } from 'nft/types'\nimport { useLazyLoadQuery } from 'react-relay'\n\nimport { DetailsQuery } from './__generated__/DetailsQuery.graphql'\n\nconst detailsQuery = graphql`\n  query DetailsQuery($address: String!, $tokenId: String!) {\n    nftAssets(address: $address, filter: { listed: false, tokenIds: [$tokenId] }) {\n      edges {\n        node {\n          id\n          name\n          ownerAddress\n          image {\n            url\n          }\n          smallImage {\n            url\n          }\n          originalImage {\n            url\n          }\n          tokenId\n          description\n          animationUrl\n          suspiciousFlag\n          creator {\n            address\n            profileImage {\n              url\n            }\n            isVerified\n          }\n          collection {\n            name\n            isVerified\n            numAssets\n            image {\n              url\n            }\n            nftContracts {\n              address\n              standard\n            }\n            description\n          }\n          listings(first: 1) {\n            edges {\n              node {\n                address\n                createdAt\n                endAt\n                id\n                maker\n                marketplace\n                marketplaceUrl\n                orderHash\n                price {\n                  currency\n                  value\n                }\n                quantity\n                startAt\n                status\n                taker\n                tokenId\n                type\n                protocolParameters\n              }\n              cursor\n            }\n          }\n          rarities {\n            provider\n            rank\n            score\n          }\n          metadataUrl\n          traits {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useDetailsQuery(address: string, tokenId: string): [GenieAsset, CollectionInfoForAsset] | undefined {\n  const queryData = useLazyLoadQuery<DetailsQuery>(detailsQuery, {\n    address,\n    tokenId,\n  })\n\n  const asset = queryData.nftAssets?.edges[0]?.node\n  const collection = asset?.collection\n  const ethPrice = parseEther(asset?.listings?.edges[0].node.price.value?.toString() ?? '0').toString()\n\n  return [\n    {\n      id: asset?.id,\n      address,\n      notForSale: asset?.listings === null,\n      collectionName: asset?.collection?.name ?? undefined,\n      collectionSymbol: asset?.collection?.image?.url,\n      imageUrl: asset?.image?.url,\n      animationUrl: asset?.animationUrl ?? undefined,\n      marketplace: asset?.listings?.edges[0]?.node.marketplace.toLowerCase() as any,\n      name: asset?.name ?? undefined,\n      priceInfo: {\n        ETHPrice: ethPrice,\n        baseAsset: 'ETH',\n        baseDecimals: '18',\n        basePrice: ethPrice,\n      },\n      susFlag: asset?.suspiciousFlag ?? undefined,\n      sellorders: asset?.listings?.edges.map((listingNode) => {\n        return {\n          ...listingNode.node,\n          protocolParameters: listingNode.node.protocolParameters\n            ? JSON.parse(listingNode.node.protocolParameters.toString())\n            : undefined,\n        } as SellOrder\n      }),\n      smallImageUrl: asset?.smallImage?.url,\n      tokenId,\n      tokenType: (asset?.collection?.nftContracts && asset?.collection.nftContracts[0]?.standard) as TokenType,\n      collectionIsVerified: asset?.collection?.isVerified ?? undefined,\n      rarity: {\n        primaryProvider: 'Rarity Sniper', // TODO update when backend adds more providers\n        providers: asset?.rarities\n          ? asset?.rarities?.map((rarity) => {\n              return {\n                rank: rarity.rank ?? undefined,\n                score: rarity.score ?? undefined,\n                provider: 'Rarity Sniper',\n              }\n            })\n          : undefined,\n      },\n      owner: { address: asset?.ownerAddress ?? '' },\n      creator: {\n        profile_img_url: asset?.creator?.profileImage?.url ?? '',\n        address: asset?.creator?.address ?? '',\n      },\n      metadataUrl: asset?.metadataUrl ?? '',\n      traits: asset?.traits?.map((trait) => {\n        return { trait_type: trait.name ?? '', trait_value: trait.value ?? '' }\n      }),\n    },\n    {\n      collectionDescription: collection?.description,\n      collectionImageUrl: collection?.image?.url,\n      collectionName: collection?.name ?? undefined,\n      isVerified: collection?.isVerified ?? undefined,\n      totalSupply: collection?.numAssets ?? undefined,\n    },\n  ]\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Upload = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"\n  }), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"17 8 12 3 7 8\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"3\",\n    x2: \"12\",\n    y2: \"15\"\n  }));\n});\nUpload.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nUpload.displayName = 'Upload';\nexport default Upload;","import Resource from 'components/Tokens/TokenDetails/Resource'\nimport { MouseoverTooltip } from 'components/Tooltip/index'\nimport { Box } from 'nft/components/Box'\nimport { reduceFilters } from 'nft/components/collection/Activity'\nimport { LoadingSparkle } from 'nft/components/common/Loading/LoadingSparkle'\nimport { AssetPriceDetails } from 'nft/components/details/AssetPriceDetails'\nimport { Center } from 'nft/components/Flex'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { ActivityFetcher } from 'nft/queries/genie/ActivityFetcher'\nimport { ActivityEventResponse, ActivityEventType } from 'nft/types'\nimport { CollectionInfoForAsset, GenieAsset, GenieCollection } from 'nft/types'\nimport { shortenAddress } from 'nft/utils/address'\nimport { formatEthPrice } from 'nft/utils/currency'\nimport { isAudio } from 'nft/utils/isAudio'\nimport { isVideo } from 'nft/utils/isVideo'\nimport { putCommas } from 'nft/utils/putCommas'\nimport { fallbackProvider, getRarityProviderLogo } from 'nft/utils/rarity'\nimport { useCallback, useMemo, useReducer, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport { useInfiniteQuery, useQuery } from 'react-query'\nimport { Link as RouterLink } from 'react-router-dom'\nimport styled, { css } from 'styled-components/macro'\n\nimport AssetActivity from './AssetActivity'\nimport * as styles from './AssetDetails.css'\nimport DetailsContainer from './DetailsContainer'\nimport InfoContainer from './InfoContainer'\nimport TraitsContainer from './TraitsContainer'\n\nconst OpacityTransition = css`\n  &:hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n\n  &:active {\n    opacity: ${({ theme }) => theme.opacity.click};\n  }\n\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => `opacity ${duration.medium} ${timing.ease}`};\n`\n\nconst CollectionHeader = styled.span`\n  display: flex;\n  align-items: center;\n  font-size: 16px;\n  line-height: 24px;\n  color: ${({ theme }) => theme.textPrimary};\n  margin-top: 28px;\n  text-decoration: none;\n  ${OpacityTransition};\n`\n\nconst AssetPriceDetailsContainer = styled.div`\n  margin-top: 20px;\n  display: none;\n  @media (max-width: 960px) {\n    display: block;\n  }\n`\n\nconst AssetHeader = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 36px;\n  line-height: 36px;\n  color: ${({ theme }) => theme.textPrimary};\n  margin-top: 8px;\n`\n\nconst MediaContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 780px;\n`\n\nconst AddressTextLink = styled.a`\n  display: inline-block;\n  color: ${({ theme }) => theme.textSecondary};\n  text-decoration: none;\n  max-width: 100%;\n  word-wrap: break-word;\n  ${OpacityTransition};\n`\n\nconst SocialsContainer = styled.div`\n  display: flex;\n  gap: 16px;\n  margin-top: 20px;\n`\n\nconst DescriptionText = styled.div`\n  margin-top: 8px;\n  font-size: 14px;\n  line-height: 20px;\n`\n\nconst RarityWrap = styled.span`\n  display: flex;\n  color: ${({ theme }) => theme.textSecondary};\n  padding: 2px 4px;\n  border-radius: 4px;\n  align-items: center;\n  gap: 4px;\n`\n\nconst EmptyActivitiesContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 28px;\n  line-height: 36px;\n  padding: 56px 0px;\n`\n\nconst Link = styled(RouterLink)`\n  color: ${({ theme }) => theme.accentAction};\n  text-decoration: none;\n  font-size: 14px;\n  line-height: 16px;\n  margin-top: 12px;\n  cursor: pointer;\n  ${OpacityTransition};\n`\n\nconst DefaultLink = styled(RouterLink)`\n  text-decoration: none;\n`\n\nconst ActivitySelectContainer = styled.div`\n  display: flex;\n  gap: 8px;\n  margin-bottom: 34px;\n  overflow-x: auto;\n\n  // Firefox scrollbar styling\n  scrollbar-width: thin;\n  scrollbar-color: ${({ theme }) => `${theme.backgroundOutline} transparent`};\n\n  // safari and chrome scrollbar styling\n  ::-webkit-scrollbar {\n    background: transparent;\n    height: 4px;\n  }\n  ::-webkit-scrollbar-track {\n    margin-top: 40px;\n  }\n  ::-webkit-scrollbar-thumb {\n    background: ${({ theme }) => theme.backgroundOutline};\n    border-radius: 8px;\n  }\n\n  @media (max-width: 720px) {\n    padding-bottom: 8px;\n  }\n`\n\nconst ContentNotAvailable = styled.div`\n  display: flex;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  color: ${({ theme }) => theme.textSecondary};\n  font-size: 14px;\n  line-height: 20px;\n  align-items: center;\n  justify-content: center;\n  border-radius: 12px;\n  width: 450px;\n  height: 450px;\n`\n\nconst FilterBox = styled.div<{ isActive?: boolean }>`\n  box-sizing: border-box;\n  background-color: ${({ theme }) => theme.backgroundInteractive};\n  color: ${({ theme }) => theme.textPrimary};\n  padding: 12px 16px;\n  border-radius: 12px;\n  cursor: pointer;\n  box-sizing: border-box;\n  border: ${({ isActive, theme }) => (isActive ? `1px solid ${theme.accentActive}` : undefined)};\n  ${OpacityTransition};\n`\n\nconst ByText = styled.span`\n  font-size: 14px;\n  line-height: 20px;\n`\n\nconst Img = styled.img`\n  background-color: white;\n`\n\nconst HoverImageContainer = styled.div`\n  display: flex;\n  margin-right: 4px;\n`\n\nconst HoverContainer = styled.div`\n  display: flex;\n`\n\nconst ContainerText = styled.span`\n  font-size: 14px;\n`\n\nconst AudioPlayer = ({\n  imageUrl,\n  animationUrl,\n  name,\n  collectionName,\n  dominantColor,\n}: GenieAsset & { dominantColor: [number, number, number] }) => {\n  return (\n    <Box position=\"relative\" display=\"inline-block\" alignSelf=\"center\">\n      <Box as=\"audio\" className={styles.audioControls} width=\"292\" controls src={animationUrl} />\n      <img\n        className={styles.image}\n        src={imageUrl}\n        alt={name || collectionName}\n        style={{\n          ['--shadow' as string]: `rgba(${dominantColor.join(', ')}, 0.5)`,\n          minWidth: '300px',\n          minHeight: '300px',\n        }}\n      />\n    </Box>\n  )\n}\n\nconst initialFilterState = {\n  [ActivityEventType.Listing]: true,\n  [ActivityEventType.Sale]: true,\n  [ActivityEventType.Transfer]: false,\n  [ActivityEventType.CancelListing]: false,\n}\n\nconst AssetView = ({\n  mediaType,\n  asset,\n  dominantColor,\n}: {\n  mediaType: 'image' | 'video' | 'audio'\n  asset: GenieAsset\n  dominantColor: [number, number, number]\n}) => {\n  const style = { ['--shadow' as string]: `rgba(${dominantColor.join(', ')}, 0.5)` }\n\n  switch (mediaType) {\n    case 'video':\n      return <video src={asset.animationUrl} className={styles.image} autoPlay controls muted loop style={style} />\n    case 'image':\n      return (\n        <img className={styles.image} src={asset.imageUrl} alt={asset.name || asset.collectionName} style={style} />\n      )\n    case 'audio':\n      return <AudioPlayer {...asset} dominantColor={dominantColor} />\n  }\n}\n\nenum MediaType {\n  Audio = 'audio',\n  Video = 'video',\n  Image = 'image',\n}\n\ninterface AssetDetailsProps {\n  asset: GenieAsset\n  collection: CollectionInfoForAsset\n  collectionStats: GenieCollection | undefined\n}\n\nexport const AssetDetails = ({ asset, collection, collectionStats }: AssetDetailsProps) => {\n  const [dominantColor] = useState<[number, number, number]>([0, 0, 0])\n\n  const { rarityProvider } = useMemo(\n    () =>\n      asset.rarity\n        ? {\n            rarityProvider: asset?.rarity?.providers?.find(\n              ({ provider: _provider }) => _provider === asset.rarity?.primaryProvider\n            ),\n          }\n        : {},\n    [asset.rarity]\n  )\n\n  const assetMediaType = useMemo(() => {\n    if (isAudio(asset.animationUrl ?? '')) {\n      return MediaType.Audio\n    } else if (isVideo(asset.animationUrl ?? '')) {\n      return MediaType.Video\n    }\n    return MediaType.Image\n  }, [asset])\n\n  const { address: contractAddress, tokenId: token_id } = asset\n\n  const { data: priceData } = useQuery<ActivityEventResponse>(\n    [\n      'collectionActivity',\n      {\n        contractAddress,\n      },\n    ],\n    async ({ pageParam = '' }) => {\n      return await ActivityFetcher(\n        contractAddress,\n        {\n          token_id,\n          eventTypes: [ActivityEventType.Sale],\n        },\n        pageParam,\n        '1'\n      )\n    },\n    {\n      getNextPageParam: (lastPage) => {\n        return lastPage.events?.length === 25 ? lastPage.cursor : undefined\n      },\n      refetchInterval: 15000,\n      refetchIntervalInBackground: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    }\n  )\n\n  const lastSalePrice = priceData?.events[0]?.price ?? null\n  const formattedEthprice = formatEthPrice(lastSalePrice ?? '') || 0\n  const formattedPrice = lastSalePrice ? putCommas(formattedEthprice).toString() : null\n  const [activeFilters, filtersDispatch] = useReducer(reduceFilters, initialFilterState)\n\n  const Filter = useCallback(\n    function ActivityFilter({ eventType }: { eventType: ActivityEventType }) {\n      const isActive = activeFilters[eventType]\n\n      return (\n        <FilterBox isActive={isActive} onClick={() => filtersDispatch({ eventType })}>\n          {eventType === ActivityEventType.CancelListing\n            ? 'Cancellations'\n            : eventType.charAt(0) + eventType.slice(1).toLowerCase() + 's'}\n        </FilterBox>\n      )\n    },\n    [activeFilters]\n  )\n\n  const {\n    data: eventsData,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isSuccess,\n  } = useInfiniteQuery<ActivityEventResponse>(\n    [\n      'collectionActivity',\n      {\n        contractAddress,\n        activeFilters,\n        token_id,\n      },\n    ],\n    async ({ pageParam = '' }) => {\n      return await ActivityFetcher(\n        contractAddress,\n        {\n          token_id,\n          eventTypes: Object.keys(activeFilters)\n            .map((key) => key as ActivityEventType)\n            .filter((key) => activeFilters[key]),\n        },\n        pageParam\n      )\n    },\n    {\n      getNextPageParam: (lastPage) => {\n        return lastPage.events?.length === 25 ? lastPage.cursor : undefined\n      },\n      refetchInterval: 15000,\n      refetchIntervalInBackground: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    }\n  )\n\n  const rarity = asset?.rarity?.providers?.length ? asset?.rarity?.providers?.[0] : undefined\n  const [showHolder, setShowHolder] = useState(false)\n  const rarityProviderLogo = getRarityProviderLogo(rarity?.provider)\n  const events = useMemo(\n    () => (isSuccess ? eventsData?.pages.map((page) => page.events).flat() : null),\n    [isSuccess, eventsData]\n  )\n\n  return (\n    <Column>\n      <MediaContainer>\n        {asset.imageUrl === undefined || showHolder ? (\n          <ContentNotAvailable>Content not available yet</ContentNotAvailable>\n        ) : assetMediaType === MediaType.Image ? (\n          <Img\n            className={styles.image}\n            src={asset.imageUrl}\n            alt={asset.name || collection.collectionName}\n            onError={() => setShowHolder(true)}\n          />\n        ) : (\n          <AssetView asset={asset} mediaType={assetMediaType} dominantColor={dominantColor} />\n        )}\n      </MediaContainer>\n      <DefaultLink to={`/nfts/collection/${asset.address}`}>\n        <CollectionHeader>\n          {collection.collectionName} {collectionStats?.isVerified && <VerifiedIcon />}\n        </CollectionHeader>\n      </DefaultLink>\n\n      <AssetHeader>{asset.name ?? `${asset.collectionName} #${asset.tokenId}`}</AssetHeader>\n      <AssetPriceDetailsContainer>\n        <AssetPriceDetails asset={asset} collection={collection} />\n      </AssetPriceDetailsContainer>\n      <InfoContainer\n        primaryHeader=\"Traits\"\n        defaultOpen\n        secondaryHeader={\n          rarityProvider && rarity && rarity.score ? (\n            <MouseoverTooltip\n              text={\n                <HoverContainer>\n                  <HoverImageContainer>\n                    <img src={rarityProviderLogo} alt=\"cardLogo\" width={16} />\n                  </HoverImageContainer>\n                  <ContainerText>\n                    {collectionStats?.rarityVerified\n                      ? `Verified by ${collectionStats?.name}`\n                      : `Ranking by ${rarity.provider === 'Genie' ? fallbackProvider : rarity.provider}`}\n                  </ContainerText>\n                </HoverContainer>\n              }\n              placement=\"top\"\n            >\n              <RarityWrap>Rarity: {putCommas(rarity.score)}</RarityWrap>\n            </MouseoverTooltip>\n          ) : null\n        }\n      >\n        <TraitsContainer asset={asset} />\n      </InfoContainer>\n      <InfoContainer\n        primaryHeader=\"Activity\"\n        secondaryHeader={formattedPrice ? `Last Sale: ${formattedPrice} ETH` : undefined}\n      >\n        <>\n          <ActivitySelectContainer>\n            <Filter eventType={ActivityEventType.Listing} />\n            <Filter eventType={ActivityEventType.Sale} />\n            <Filter eventType={ActivityEventType.Transfer} />\n            <Filter eventType={ActivityEventType.CancelListing} />\n          </ActivitySelectContainer>\n          {events && events.length > 0 ? (\n            <InfiniteScroll\n              next={fetchNextPage}\n              hasMore={!!hasNextPage}\n              loader={\n                isFetchingNextPage ? (\n                  <Center>\n                    <LoadingSparkle />\n                  </Center>\n                ) : null\n              }\n              dataLength={events?.length ?? 0}\n              scrollableTarget=\"activityContainer\"\n            >\n              <AssetActivity eventsData={{ events }} />\n            </InfiniteScroll>\n          ) : (\n            <EmptyActivitiesContainer>\n              <div>No activities yet</div>\n              <Link to={`/nfts/collection/${asset.address}`}>View collection items</Link>{' '}\n            </EmptyActivitiesContainer>\n          )}\n        </>\n      </InfoContainer>\n      <InfoContainer primaryHeader=\"Description\" secondaryHeader={null}>\n        <>\n          <ByText>By </ByText>\n          {asset?.creator && asset.creator?.address && (\n            <AddressTextLink\n              href={`https://etherscan.io/address/${asset.creator.address}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {shortenAddress(asset.creator.address, 2, 4)}\n            </AddressTextLink>\n          )}\n\n          <DescriptionText>{collection.collectionDescription}</DescriptionText>\n          <SocialsContainer>\n            {collectionStats?.externalUrl && <Resource name=\"Website\" link={`${collectionStats?.externalUrl}`} />}\n            {collectionStats?.twitterUrl && (\n              <Resource name=\"Twitter\" link={`https://twitter.com/${collectionStats?.twitterUrl}`} />\n            )}\n            {collectionStats?.discordUrl && <Resource name=\"Discord\" link={collectionStats?.discordUrl} />}\n          </SocialsContainer>\n        </>\n      </InfoContainer>\n      <InfoContainer primaryHeader=\"Details\" secondaryHeader={null}>\n        <DetailsContainer asset={asset} collection={collection} />\n      </InfoContainer>\n    </Column>\n  )\n}\n","import { useWeb3React } from '@web3-react/core'\nimport useCopyClipboard from 'hooks/useCopyClipboard'\nimport { CancelListingIcon, MinusIcon, PlusIcon } from 'nft/components/icons'\nimport { useBag } from 'nft/hooks'\nimport { CollectionInfoForAsset, Deprecated_SellOrder, GenieAsset, SellOrder, TokenType } from 'nft/types'\nimport { ethNumberStandardFormatter, formatEthPrice, getMarketplaceIcon, timeLeft, useUsdPrice } from 'nft/utils'\nimport { shortenAddress } from 'nft/utils/address'\nimport { useMemo } from 'react'\nimport { Upload } from 'react-feather'\nimport { useNavigate } from 'react-router-dom'\nimport styled, { css, useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\ninterface AssetPriceDetailsProps {\n  asset: GenieAsset\n  collection: CollectionInfoForAsset\n}\n\nconst hoverState = css`\n  :hover::after {\n    border-radius: 12px;\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: ${({ theme }) => theme.stateOverlayHover};\n    z-index: 0;\n  }\n\n  :active::after {\n    border-radius: 12px;\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: ${({ theme }) => theme.stateOverlayPressed};\n    z-index: 0;\n  }\n`\n\nconst Container = styled.div`\n  width: 100%;\n\n  @media (min-width: 960px) {\n    position: fixed;\n    width: 360px;\n    margin-top: -6px;\n  }\n`\n\nconst BestPriceContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 12px;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n`\n\nconst HeaderRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst PriceRow = styled.div`\n  display: flex;\n  gap: 12px;\n  align-items: flex-end;\n`\n\nconst MarketplaceIcon = styled.img`\n  width: 20px;\n  height: 20px;\n  border-radius: 4px;\n  margin-top: auto;\n  margin-bottom: auto;\n`\n\nconst BuyNowButton = styled.div<{ assetInBag: boolean; margin: boolean; useAccentColor: boolean }>`\n  width: 100%;\n  background-color: ${({ theme, assetInBag, useAccentColor }) =>\n    assetInBag ? theme.accentFailure : useAccentColor ? theme.accentAction : theme.backgroundInteractive};\n  border-radius: 12px;\n  padding: 10px 12px;\n  margin-top: ${({ margin }) => (margin ? '12px' : '0px')};\n  text-align: center;\n  cursor: pointer;\n\n  ${hoverState}\n`\n\nconst BuyNowButtonContainer = styled.div`\n  position: relative;\n`\n\nconst Erc1155BuyNowButton = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  width: 100%;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  border: ${({ theme }) => `1px solid ${theme.backgroundOutline}`};\n  border-radius: 12px;\n  margin-top: 12px;\n  text-align: center;\n  cursor: pointer;\n  justify-content: space-between;\n  overflow-x: hidden;\n`\nconst Tertiary = styled(ThemedText.BodySecondary)`\n  color: ${({ theme }) => theme.textTertiary};\n`\n\nconst Erc1155BuyNowText = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 10px 12px;\n  justify-content: center;\n  cursor: default;\n`\n\nconst Erc1155ChangeButton = styled(Erc1155BuyNowText)<{ remove: boolean }>`\n  background-color: ${({ theme, remove }) => (remove ? theme.accentFailureSoft : theme.accentActionSoft)};\n  color: ${({ theme, remove }) => (remove ? theme.accentFailure : theme.accentAction)};\n  cursor: pointer;\n\n  ${hoverState}\n\n  &:hover::after {\n    border-radius: 0px;\n  }\n`\n\nconst UploadLink = styled.a`\n  color: ${({ theme }) => theme.textSecondary};\n  cursor: pointer;\n\n  &:hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n\n  &:active {\n    opacity: ${({ theme }) => theme.opacity.click};\n  }\n\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => `opacity ${duration.medium} ${timing.ease}`};\n`\n\nconst NotForSaleContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  padding: 48px 18px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst DiscoveryContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst OwnerText = styled.a`\n  font-size: 14px;\n  line-height: 20px;\n  color: ${({ theme }) => theme.textSecondary};\n  text-decoration: none;\n\n  &:hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n\n  &:active {\n    opacity: ${({ theme }) => theme.opacity.click};\n  }\n\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => `opacity ${duration.medium} ${timing.ease}`};\n`\n\nconst OwnerInformationContainer = styled.div`\n  color: ${({ theme }) => theme.textSecondary};\n  display: flex;\n  justify-content: space-between;\n  padding: 0 8px;\n  margin-bottom: 20px;\n`\n\nexport const OwnerContainer = ({ asset }: { asset: GenieAsset }) => {\n  const listing = asset.sellorders && asset.sellorders.length > 0 ? asset.sellorders[0] : undefined\n  const cheapestOrder = asset.sellorders && asset.sellorders.length > 0 ? asset.sellorders[0] : undefined\n  const expirationDate = cheapestOrder\n    ? new Date((cheapestOrder as Deprecated_SellOrder).orderClosingDate ?? (cheapestOrder as SellOrder).endAt)\n    : undefined\n  const USDPrice = useUsdPrice(asset)\n\n  const navigate = useNavigate()\n\n  return (\n    <Container>\n      <BestPriceContainer>\n        <HeaderRow>\n          <ThemedText.SubHeader fontWeight={500} lineHeight={'24px'}>\n            {listing ? 'Your Price' : 'List for Sale'}\n          </ThemedText.SubHeader>\n          {listing && <MarketplaceIcon alt={listing.marketplace} src={getMarketplaceIcon(listing.marketplace)} />}\n        </HeaderRow>\n        <PriceRow>\n          {listing ? (\n            <>\n              <ThemedText.MediumHeader fontSize={'28px'} lineHeight={'36px'}>\n                {formatEthPrice(asset.priceInfo.ETHPrice)}\n              </ThemedText.MediumHeader>\n              {USDPrice && (\n                <ThemedText.BodySecondary lineHeight={'24px'}>\n                  {ethNumberStandardFormatter(USDPrice, true, true)}\n                </ThemedText.BodySecondary>\n              )}\n            </>\n          ) : (\n            <ThemedText.BodySecondary fontSize=\"14px\" lineHeight={'20px'}>\n              Get the best price for your NFT by selling with Uniswap.\n            </ThemedText.BodySecondary>\n          )}\n        </PriceRow>\n        {expirationDate && (\n          <ThemedText.BodySecondary fontSize={'14px'}>Sale ends: {timeLeft(expirationDate)}</ThemedText.BodySecondary>\n        )}\n        {!listing ? (\n          <BuyNowButton assetInBag={false} margin={true} useAccentColor={true} onClick={() => navigate('/profile')}>\n            <ThemedText.SubHeader lineHeight={'20px'}>List</ThemedText.SubHeader>\n          </BuyNowButton>\n        ) : (\n          <>\n            <BuyNowButton assetInBag={false} margin={true} useAccentColor={false} onClick={() => navigate('/profile')}>\n              <ThemedText.SubHeader lineHeight={'20px'}>Adjust listing</ThemedText.SubHeader>\n            </BuyNowButton>\n            <BuyNowButton assetInBag={true} margin={false} useAccentColor={false} onClick={() => navigate('/profile')}>\n              <ThemedText.SubHeader lineHeight={'20px'}>Cancel listing</ThemedText.SubHeader>\n            </BuyNowButton>\n          </>\n        )}\n      </BestPriceContainer>\n    </Container>\n  )\n}\n\nexport const NotForSale = ({ collection }: { collection: CollectionInfoForAsset }) => {\n  const theme = useTheme()\n\n  return (\n    <BestPriceContainer>\n      <NotForSaleContainer>\n        <CancelListingIcon width=\"79px\" height=\"79px\" color={theme.textTertiary} />\n        <ThemedText.SubHeader fontWeight={500} lineHeight=\"24px\">\n          Not for sale\n        </ThemedText.SubHeader>\n        <DiscoveryContainer>\n          <ThemedText.BodySecondary fontSize=\"14px\" lineHeight=\"20px\">\n            Discover similar NFTs for sale in\n          </ThemedText.BodySecondary>\n          <ThemedText.Link lineHeight=\"20px\">{collection.collectionName}</ThemedText.Link>\n        </DiscoveryContainer>\n      </NotForSaleContainer>\n    </BestPriceContainer>\n  )\n}\n\nconst SubHeader = styled(ThemedText.SubHeader)`\n  color: ${({ theme }) => theme.textPrimary};\n`\n\nexport const AssetPriceDetails = ({ asset, collection }: AssetPriceDetailsProps) => {\n  const { account } = useWeb3React()\n\n  const cheapestOrder = asset.sellorders && asset.sellorders.length > 0 ? asset.sellorders[0] : undefined\n  const expirationDate = cheapestOrder\n    ? new Date((cheapestOrder as Deprecated_SellOrder).orderClosingDate ?? (cheapestOrder as SellOrder).endAt)\n    : undefined\n\n  const itemsInBag = useBag((s) => s.itemsInBag)\n  const addAssetsToBag = useBag((s) => s.addAssetsToBag)\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\n  const toggleBag = useBag((s) => s.toggleBag)\n  const bagExpanded = useBag((s) => s.bagExpanded)\n\n  const USDPrice = useUsdPrice(asset)\n  const isErc1555 = asset.tokenType === TokenType.ERC1155\n  const [, setCopied] = useCopyClipboard()\n\n  const { quantity, assetInBag } = useMemo(() => {\n    return {\n      quantity: itemsInBag.filter(\n        (x) => x.asset.tokenType === 'ERC1155' && x.asset.tokenId === asset.tokenId && x.asset.address === asset.address\n      ).length,\n      assetInBag: itemsInBag.some(\n        (item) => asset.tokenId === item.asset.tokenId && asset.address === item.asset.address\n      ),\n    }\n  }, [asset, itemsInBag])\n\n  const isOwner = asset.owner ? account?.toLowerCase() === asset.owner?.address?.toLowerCase() : false\n\n  if (isOwner) {\n    return <OwnerContainer asset={asset} />\n  }\n\n  return (\n    <Container>\n      <OwnerInformationContainer>\n        <OwnerText\n          target=\"_blank\"\n          href={`https://etherscan.io/address/${asset.owner.address}`}\n          rel=\"noopener noreferrer\"\n        >\n          {asset.tokenType === 'ERC1155' ? (\n            ''\n          ) : (\n            <span> Seller: {isOwner ? 'you' : asset.owner.address && shortenAddress(asset.owner.address, 2, 4)}</span>\n          )}\n        </OwnerText>\n        <UploadLink\n          onClick={() => {\n            setCopied(window.location.href)\n          }}\n          target=\"_blank\"\n        >\n          <Upload size={20} strokeWidth={2} />\n        </UploadLink>\n      </OwnerInformationContainer>\n\n      {cheapestOrder && asset.priceInfo ? (\n        <BestPriceContainer>\n          <HeaderRow>\n            <ThemedText.SubHeader fontWeight={500} lineHeight={'24px'}>\n              Best Price\n            </ThemedText.SubHeader>\n            <MarketplaceIcon alt={cheapestOrder.marketplace} src={getMarketplaceIcon(cheapestOrder.marketplace)} />\n          </HeaderRow>\n          <PriceRow>\n            <ThemedText.MediumHeader fontSize={'28px'} lineHeight={'36px'}>\n              {formatEthPrice(asset.priceInfo.ETHPrice)} ETH\n            </ThemedText.MediumHeader>\n            {USDPrice && (\n              <ThemedText.BodySecondary lineHeight={'24px'}>\n                {ethNumberStandardFormatter(USDPrice, true, true)}\n              </ThemedText.BodySecondary>\n            )}\n          </PriceRow>\n          {expirationDate && <Tertiary fontSize={'14px'}>Sale ends: {timeLeft(expirationDate)}</Tertiary>}\n          <div>\n            {!isErc1555 || !assetInBag ? (\n              <BuyNowButtonContainer>\n                <BuyNowButton\n                  assetInBag={assetInBag}\n                  margin={true}\n                  useAccentColor={true}\n                  onClick={() => {\n                    assetInBag ? removeAssetsFromBag([asset]) : addAssetsToBag([asset])\n                    if (!assetInBag && !isErc1555 && !bagExpanded) {\n                      toggleBag()\n                    }\n                  }}\n                >\n                  <SubHeader lineHeight={'20px'}>\n                    <span>{assetInBag ? 'Remove' : 'Buy Now'}</span>\n                  </SubHeader>\n                </BuyNowButton>\n              </BuyNowButtonContainer>\n            ) : (\n              <Erc1155BuyNowButton>\n                <BuyNowButtonContainer>\n                  <Erc1155ChangeButton remove={true} onClick={() => removeAssetsFromBag([asset])}>\n                    <MinusIcon width=\"20px\" height=\"20px\" />\n                  </Erc1155ChangeButton>\n                </BuyNowButtonContainer>\n\n                <BuyNowButtonContainer>\n                  <Erc1155BuyNowText>\n                    <ThemedText.SubHeader lineHeight={'20px'}>{quantity}</ThemedText.SubHeader>\n                  </Erc1155BuyNowText>\n                </BuyNowButtonContainer>\n\n                <BuyNowButtonContainer>\n                  <Erc1155ChangeButton remove={false} onClick={() => addAssetsToBag([asset])}>\n                    <PlusIcon width=\"20px\" height=\"20px\" />\n                  </Erc1155ChangeButton>\n                </BuyNowButtonContainer>\n              </Erc1155BuyNowButton>\n            )}\n          </div>\n        </BestPriceContainer>\n      ) : (\n        <NotForSale collection={collection} />\n      )}\n    </Container>\n  )\n}\n","import { ActivityEventResponse } from 'nft/types'\nimport { shortenAddress } from 'nft/utils/address'\nimport { formatEthPrice } from 'nft/utils/currency'\nimport { getTimeDifference } from 'nft/utils/date'\nimport { putCommas } from 'nft/utils/putCommas'\nimport styled from 'styled-components/macro'\n\nimport { EventCell } from '../collection/ActivityCells'\nimport { MarketplaceIcon } from '../collection/ActivityCells'\n\nconst TR = styled.tr`\n  border-bottom: ${({ theme }) => `1px solid ${theme.backgroundOutline}`};\n  width: 100%;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`\n\nconst TH = styled.th`\n  color: ${({ theme }) => theme.textSecondary};\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 20px;\n  width: 20%;\n\n  @media (max-width: 960px) {\n    &:nth-child(4) {\n      display: none;\n    }\n  }\n\n  @media (max-width: 720px) {\n    &:nth-child(2) {\n      display: none;\n    }\n  }\n`\n\nconst Table = styled.table`\n  border-collapse: collapse;\n  text-align: left;\n  width: 100%;\n`\n\nconst TD = styled.td`\n  height: 56px;\n  padding: 8px 0px;\n  text-align: left;\n  vertical-align: middle;\n  width: 20%;\n\n  @media (max-width: 960px) {\n    &:nth-child(4) {\n      display: none;\n    }\n  }\n\n  @media (max-width: 720px) {\n    &:nth-child(2) {\n      display: none;\n    }\n  }\n`\n\nconst PriceContainer = styled.div`\n  align-items: center;\n  display: flex;\n  gap: 8px;\n`\n\nconst Link = styled.a`\n  color: ${({ theme }) => theme.textPrimary};\n  text-decoration: none;\n\n  &:hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n\n  &:active {\n    opacity: ${({ theme }) => theme.opacity.click};\n  }\n\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => `opacity ${duration.medium} ${timing.ease}`};\n`\n\nconst ActivityContainer = styled.div`\n  max-height: 310px;\n  overflow: auto;\n\n  // Firefox scrollbar styling\n  scrollbar-width: thin;\n  scrollbar-color: ${({ theme }) => `${theme.backgroundOutline} transparent`};\n\n  // safari and chrome scrollbar styling\n  ::-webkit-scrollbar {\n    background: transparent;\n    width: 4px;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: ${({ theme }) => theme.backgroundOutline};\n    border-radius: 8px;\n  }\n`\n\nconst AssetActivity = ({ eventsData }: { eventsData: ActivityEventResponse | undefined }) => {\n  return (\n    <ActivityContainer id=\"activityContainer\">\n      <Table>\n        <thead>\n          <TR>\n            <TH>Event</TH>\n            <TH>Price</TH>\n            <TH>By</TH>\n            <TH>To</TH>\n            <TH>Time</TH>\n          </TR>\n        </thead>\n        <tbody>\n          {eventsData?.events &&\n            eventsData.events.map((event, index) => {\n              const { eventTimestamp, eventType, fromAddress, marketplace, price, toAddress, transactionHash } = event\n              const formattedPrice = price ? putCommas(formatEthPrice(price)).toString() : null\n\n              return (\n                <TR key={index}>\n                  <TD>\n                    <EventCell\n                      eventType={eventType}\n                      eventTimestamp={eventTimestamp}\n                      eventTransactionHash={transactionHash}\n                      eventOnly\n                    />\n                  </TD>\n                  <TD>\n                    {formattedPrice && (\n                      <PriceContainer>\n                        {marketplace && <MarketplaceIcon marketplace={marketplace} />}\n                        {formattedPrice} ETH\n                      </PriceContainer>\n                    )}\n                  </TD>\n\n                  <TD>\n                    {fromAddress && (\n                      <Link\n                        href={`https://etherscan.io/address/${fromAddress}`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        {shortenAddress(fromAddress, 2, 4)}\n                      </Link>\n                    )}\n                  </TD>\n\n                  <TD>\n                    {toAddress && (\n                      <Link\n                        href={`https://etherscan.io/address/${toAddress}`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        {shortenAddress(toAddress, 2, 4)}\n                      </Link>\n                    )}\n                  </TD>\n                  <TD>{eventTimestamp && getTimeDifference(eventTimestamp.toString())}</TD>\n                </TR>\n              )\n            })}\n        </tbody>\n      </Table>\n    </ActivityContainer>\n  )\n}\n\nexport default AssetActivity\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#H4sIAAAAAAAACo1UwW7bMAy95yuEFgUSoDLsJE0a5dTLrjvsAwbZoh3NjuRKcuJm2L+PUrzW8rohN5l8enyPFJ18z5bb5vkgKvJzRkiujQDDiNIK9rNfs+Q9zQ76BCaAis5YjaBWS+XATHBCWp43ICIo75yOcDKkWy6EVBUj2brtSfbc9jEoJtMtL6R7YyRNVhGujsmWyDWlqie6dONlnbiZU1qBkkBDyNKcF3VldKfEt86UvIDF3vflPUpvufq1c41U/upIgppY3nnLW6/T972nVl5C4joDiiGfcdA7yhtZKUYaKF1EqQOlM1zZUpsjI7bgDcyzZPkU124ZywEhMLjHuSnHyN2dL9FqK53UWIDnVjedAx+VygJC0tg+ikBj3NDKcCGRZL7LkvVGQPVI7teb7erLC0kf8LzbrDd4ztI0yVYPi4mr4WvoZTDQcoN0PknPkNfS0SO39d/17suyJClJF39a6Tkf/w3bTymx6jFYBkZ6bUJ+Goe+aDoBI6nWvTWYwP5IMQqfpXAHHGY7tuU1dJZhCw9gpLv2OOwKhROKs58s2Gs0oY+nPlYf+jSMakDgLiyfLAFug1h61JebYPYG1P8RVHdu4iD8Ij73kUVQO/qbjN/WdalMdd7AJfvhn/BvctI31KAEAAA=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/details/AssetDetails.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/details/AssetDetails.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#H4sIAAAAAAAACnVT7Y6jIBT9P09BJmnSJqVBU6212WTfY7PZoF6VHYQG8GNmM+++CNbqrPuHkHsPh3POhdOv4F3WZdEH6M8LQg0dcA2sqk2Kcsrz/ZV0NcIoiKP7cLiNCCZmxJmQ+3CbjvWsMHWKLslUy+SAdU0L2afIllA4LtG4dFTt8dQ7HF0zmJuqyuj+Qo4oCKIjCiO7I6fQXv35cnpoDb3WhRKnNSBe7PXitC4ORD8KaiimuWEdfHs1qoXXn47EwGBwAblU1DApUtSKAhRnAm7/dnEuuVTpZEBVfQwfvw8zcD6KZVlqsLISH8VXGlOz/E2A1ikKPWKDuFpbSJxcFyr7YKJK7V7Z+7AtrYBXB6ScVQJr4KUNB4QBtQLR7Wk/EnyOW3agSj7OUOdKcj7W/C6j6jFzIce4lvRpinvI3pjBM9jdWDB95/R940jm+nepmZ8DzbTkrXFj4FBahWTcKq+WzLE6o0+PoylV2ZcxAWlr5KLqmR7FTBojm9n7ziX+vYGCUbRfvOmAhGebh1N4Wn+YdYjxuatH4s8lMJmAJYcBF0xB7h3ambeNuLmeHxcz0OillxXPdXHhJMwJT5LdwbNsVVcUdEOznfnOAze9x2fyf+uLHxg+/v2aPYp9IivZzysXpPFE+uWJOGF/AXkw7XmmBAAA\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var image = '_1yohfdw1 rgw6ez6mh rgw6ez1bb rgw6ez4b';\nexport var container = '_1yohfdw2 rgw6ez40h rgw6ez43b rgw6ez35';\nexport var marketplace = 'rgw6ez6lt';\nexport var tab = '_1yohfdw5 rgw6ezch rgw6ezan rgw6ez6zt rgw6ez49t rgw6ez6tl rgw6ez2p5 rgw6ez4lb rgw6ez6kl';\nexport var creator = '_1yohfdw6';\nexport var columns = '_1yohfdw8 rgw6ez40h rgw6ez42n rgw6ez43b rgw6ez14n rgw6ez2a5 rgw6ez2ap rgw6ez2bw rgw6ez2fn rgw6ez2g7 rgw6ez2he rgw6ez24n rgw6ez257 rgw6ez26e rgw6ez2l5 rgw6ez3qh rgw6ez3qd rgw6ez3re';\nexport var column = '_1yohfdw9';\nexport var columnRight = '_1yohfdwa';\nexport var audioControls = '_1yohfdwb';","import useCopyClipboard from 'hooks/useCopyClipboard'\nimport { CollectionInfoForAsset, GenieAsset } from 'nft/types'\nimport { putCommas } from 'nft/utils'\nimport { shortenAddress } from 'nft/utils/address'\nimport { useCallback } from 'react'\nimport { Copy } from 'react-feather'\nimport styled from 'styled-components/macro'\n\nconst Details = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-gap: 40px;\n\n  @media (max-width: 600px) {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n\n  @media (max-width: 450px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`\n\nconst Header = styled.div`\n  color: ${({ theme }) => theme.textSecondary};\n  font-size: 14px;\n  line-height: 20px;\n`\n\nconst Body = styled.div`\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 14px;\n  line-height: 20px;\n  margin-top: 8px;\n`\n\nconst Center = styled.span`\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  gap: 8px;\n\n  &:hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n\n  &:active {\n    opacity: ${({ theme }) => theme.opacity.click};\n  }\n\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => `opacity ${duration.medium} ${timing.ease}`};\n`\n\nconst CreatorLink = styled.a`\n  color: ${({ theme }) => theme.textPrimary};\n  text-decoration: none;\n\n  &:hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n\n  &:active {\n    opacity: ${({ theme }) => theme.opacity.click};\n  }\n\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => `opacity ${duration.medium} ${timing.ease}`};\n`\n\nconst CopyIcon = styled(Copy)`\n  cursor: pointer;\n`\n\nconst GridItem = ({ header, body }: { header: string; body: React.ReactNode }) => {\n  return (\n    <div>\n      <Header>{header}</Header>\n      <Body>{body}</Body>\n    </div>\n  )\n}\n\nconst stringShortener = (text: string) => `${text.substring(0, 4)}...${text.substring(text.length - 4, text.length)}`\n\nconst DetailsContainer = ({ asset, collection }: { asset: GenieAsset; collection: CollectionInfoForAsset }) => {\n  const { address, tokenId, tokenType, creator } = asset\n  const { totalSupply } = collection\n\n  const [, setCopied] = useCopyClipboard()\n  const copy = useCallback(() => {\n    setCopied(address ?? '')\n  }, [address, setCopied])\n\n  return (\n    <Details>\n      <GridItem\n        header=\"Contract address\"\n        body={\n          <Center onClick={copy}>\n            {shortenAddress(address, 2, 4)} <CopyIcon size={13} />\n          </Center>\n        }\n      />\n      <GridItem header=\"Token ID\" body={tokenId.length > 9 ? stringShortener(tokenId) : tokenId} />\n      <GridItem header=\"Token standard\" body={tokenType} />\n      <GridItem header=\"Blockchain\" body=\"Ethereum\" />\n      <GridItem header=\"Total supply\" body={`${putCommas(totalSupply ?? 0)}`} />\n      <GridItem\n        header=\"Creator\"\n        body={\n          creator?.address && (\n            <CreatorLink\n              href={`https://etherscan.io/address/${creator.address}`}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              {shortenAddress(creator.address, 2, 4)}\n            </CreatorLink>\n          )\n        }\n      />\n    </Details>\n  )\n}\n\nexport default DetailsContainer\n","import { useState } from 'react'\nimport { ChevronDown, ChevronUp } from 'react-feather'\nimport styled, { css } from 'styled-components/macro'\n\nconst Header = styled.div<{ isOpen: boolean }>`\n  display: flex;\n  border-radius: ${({ isOpen }) => (isOpen ? '16px 16px 0px 0px' : '16px')};\n  justify-content: space-between;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  padding: 14px 20px;\n  cursor: pointer;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  margin-top: 28px;\n  width: 100%;\n  align-items: center;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.stateOverlayHover};\n  }\n\n  &:active {\n    background-color: ${({ theme }) => theme.stateOverlayPressed};\n  }\n\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => css`background-color ${duration.medium} ${timing.ease}`};\n`\n\nconst PrimaryHeader = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  color: ${({ theme }) => theme.textPrimary};\n  font-weight: 500;\n  line-height: 28px;\n  font-size: 20px;\n`\n\nconst SecondaryHeader = styled.span`\n  font-size: 12px;\n  color: ${({ theme }) => theme.textSecondary};\n`\n\nconst SecondaryHeaderContainer = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 32px;\n  color: ${({ theme }) => theme.textPrimary};\n`\n\nconst ContentContainer = styled.div`\n  padding: 20px;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-top: none;\n  border-radius: 0px 0px 16px 16px;\n  background-color: ${({ theme }) => theme.backgroundSurface}; ;\n`\n\nconst InfoContainer = ({\n  children,\n  primaryHeader,\n  secondaryHeader,\n  defaultOpen,\n}: {\n  children: JSX.Element\n  primaryHeader: string\n  secondaryHeader: React.ReactNode\n  defaultOpen?: boolean\n}) => {\n  const [isOpen, setIsOpen] = useState(!!defaultOpen)\n\n  return (\n    <div>\n      <Header isOpen={isOpen} onClick={() => setIsOpen(!isOpen)}>\n        <PrimaryHeader>\n          {primaryHeader} <SecondaryHeader>{secondaryHeader}</SecondaryHeader>\n        </PrimaryHeader>\n        <SecondaryHeaderContainer>{isOpen ? <ChevronUp /> : <ChevronDown />}</SecondaryHeaderContainer>\n      </Header>\n      {isOpen && <ContentContainer>{children}</ContentContainer>}\n    </div>\n  )\n}\n\nexport default InfoContainer\n","import { GenieAsset, Trait } from 'nft/types'\nimport qs from 'query-string'\nimport { useMemo } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  gap: 16px;\n  max-width: 780px;\n\n  @media (max-width: 960px) {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n\n  @media (max-width: 420px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`\n\nconst GridItemContainer = styled(Link)`\n  background-color: ${({ theme }) => theme.backgroundInteractive};\n  border-radius: 12px;\n  cursor: pointer;\n  padding: 12px;\n  text-decoration: none;\n\n  &:hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n\n  &:active {\n    opacity: ${({ theme }) => theme.opacity.click};\n  }\n\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => `opacity ${duration.medium} ${timing.ease}`};\n  min-width: 0;\n`\n\nconst TraitType = styled.div`\n  color: ${({ theme }) => theme.textSecondary};\n  font-weight: 600;\n  font-size: 10px;\n  line-height: 12px;\n  white-space: nowrap;\n  width: 100%;\n`\n\nconst TraitValue = styled.div`\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 16px;\n  line-height: 24px;\n  margin-top: 4px;\n  display: inline-block;\n\n  display: inline-block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  max-width: 100%;\n`\n\nconst GridItem = ({ trait, collectionAddress }: { trait: Trait; collectionAddress: string }) => {\n  const { trait_type, trait_value } = trait\n  const params = qs.stringify(\n    { traits: [`(\"${trait_type}\",\"${trait_value}\")`] },\n    {\n      arrayFormat: 'comma',\n    }\n  )\n\n  return (\n    <GridItemContainer to={`/nfts/collection/${collectionAddress}?${params}`}>\n      <TraitType>{trait_type}</TraitType>\n      <TraitValue>{trait_value}</TraitValue>\n    </GridItemContainer>\n  )\n}\n\nconst TraitsContainer = ({ asset }: { asset: GenieAsset }) => {\n  const traits = useMemo(() => asset.traits?.sort((a, b) => a.trait_type.localeCompare(b.trait_type)), [asset])\n\n  return (\n    <Grid>\n      {traits?.map((trait) => {\n        return <GridItem key={trait.trait_type} trait={trait} collectionAddress={asset.address} />\n      })}\n    </Grid>\n  )\n}\n\nexport default TraitsContainer\n","import { PageName } from 'analytics/constants'\nimport { Trace } from 'analytics/Trace'\nimport { NftGraphQlVariant, useNftGraphQlFlag } from 'featureFlags/flags/nftGraphQl'\nimport { useDetailsQuery } from 'graphql/data/nft/Details'\nimport { AssetDetails } from 'nft/components/details/AssetDetails'\nimport { AssetPriceDetails } from 'nft/components/details/AssetPriceDetails'\nimport { fetchSingleAsset } from 'nft/queries'\nimport { CollectionStatsFetcher } from 'nft/queries'\nimport { useMemo } from 'react'\nimport { useQuery } from 'react-query'\nimport { useParams } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nconst AssetContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  gap: 60px;\n  padding: 48px 40px 0 40px;\n`\n\nconst AssetPriceDetailsContainer = styled.div`\n  min-width: 360px;\n  position: relative;\n  padding-right: 100px;\n\n  @media (max-width: 960px) {\n    display: none;\n  }\n`\n\nconst Asset = () => {\n  const { tokenId = '', contractAddress = '' } = useParams()\n  const isNftGraphQl = useNftGraphQlFlag() === NftGraphQlVariant.Enabled\n\n  const { data } = useQuery(\n    ['assetDetail', contractAddress, tokenId],\n    () => fetchSingleAsset({ contractAddress, tokenId }),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      refetchOnReconnect: false,\n    }\n  )\n  const gqlData = useDetailsQuery(contractAddress, tokenId)\n\n  const asset = useMemo(() => (isNftGraphQl ? gqlData && gqlData[0] : data && data[0]), [data, gqlData, isNftGraphQl])\n  const collection = useMemo(\n    () => (isNftGraphQl ? gqlData && gqlData[1] : data && data[1]),\n    [data, gqlData, isNftGraphQl]\n  )\n\n  const { data: collectionStats } = useQuery(['collectionStats', contractAddress], () =>\n    CollectionStatsFetcher(contractAddress)\n  )\n\n  return (\n    <>\n      <Trace\n        page={PageName.NFT_DETAILS_PAGE}\n        properties={{ collection_address: contractAddress, token_id: tokenId }}\n        shouldLogImpression\n      >\n        {asset && collection ? (\n          <AssetContainer>\n            <AssetDetails collection={collection} asset={asset} collectionStats={collectionStats} />\n            <AssetPriceDetailsContainer>\n              <AssetPriceDetails collection={collection} asset={asset} />\n            </AssetPriceDetailsContainer>\n          </AssetContainer>\n        ) : (\n          <div>Holder for loading ...</div>\n        )}\n      </Trace>\n    </>\n  )\n}\n\nexport default Asset\n"],"sourceRoot":""}